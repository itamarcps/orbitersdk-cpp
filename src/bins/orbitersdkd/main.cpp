/*
Copyright (c) [2023-2024] [Sparq Network]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#include <iostream>
#include <filesystem>
#include <evmc/evmc.hpp>
#include <evmc/hex.hpp>
#include "src/core/evmhost.hpp"
#include <evmone/evmone.h>

#include "src/core/blockchain.h"
#include "src/core/evmhost.hpp"

using namespace evmc::literals;

constexpr int64_t GAS = INT64_MAX;
const auto ZERO_ADDRESS = 0x0000000000000000000000000000000000000000_address;
const auto ERC20_CONTRACT_ADDRESS = 0x2000000000000000000000000000000000000002_address;
const auto ANOTHER_CONTRACT_ADDRESS = 0x3000000000000000000000000000000000000003_address;
const auto CALLER_ADDRESS = 0x1000000000000000000000000000000000000001_address;
const auto ANOTHER_CALLED_ADDRESS = 0x4000000000000000000000000000000000000004_address;
const auto ECRECOVER_CONTRACT_ADDRESS = 0x5000000000000000000000000000000000000005_address;

std::unique_ptr<Blockchain> blockchain = nullptr;

[[noreturn]] void signalHandler(int signum) {
  Logger::logToDebug(LogType::INFO, "MAIN", "MAIN", "Received signal " + std::to_string(signum) + ". Stopping the blockchain.");
  blockchain->stop();
  blockchain = nullptr; // Destroy the blockchain object, calling the destructor of every module and dumping to DB.
  Utils::safePrint("Exiting...");
  std::this_thread::sleep_for(std::chrono::milliseconds(500));
  exit(signum);
}

int main() {
  Bytes contractAbi = Hex::toBytes("");
  const auto vm = evmc_create_evmone();
  EVMHost host(vm);



  evmc_message create_msg{};
  create_msg.sender = CALLER_ADDRESS;
  create_msg.kind = evmc_call_kind::EVMC_CREATE;
  create_msg.recipient = ERC20_CONTRACT_ADDRESS;
  create_msg.gas = GAS;

  std::cout << "account code: " << host.accounts[ERC20_CONTRACT_ADDRESS].code.second.size() << std::endl;
  std::cout << "account storage size: " << host.accounts[ERC20_CONTRACT_ADDRESS].storage.size() << std::endl;
  std::cout << "account transient storage: " << host.accounts[ERC20_CONTRACT_ADDRESS].transientStorage.size() << std::endl;

  auto create_result =
    evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                 evmc_revision::EVMC_LATEST_STABLE_REVISION, &create_msg,
                 contractAbi.data(), contractAbi.size());

  std::cout << "create_result.status: " << create_result.status_code << std::endl;
  std::cout << "create_result.gas_left: " << create_result.gas_left << std::endl;
  std::cout << "create_resullt.gas used: " << GAS - create_result.gas_left << std::endl;
  std::cout << "account code: " << host.accounts[ERC20_CONTRACT_ADDRESS].code.second.size() << std::endl;
  std::cout << "account storage size: " << host.accounts[ERC20_CONTRACT_ADDRESS].storage.size() << std::endl;
  std::cout << "account transient storage: " << host.accounts[ERC20_CONTRACT_ADDRESS].transientStorage.size() << std::endl;
  Bytes balanceOf = Hex::toBytes("0x70a082310000000000000000000000001000000000000000000000000000000000000001");

  /// Put the code into the account
  host.accounts[ERC20_CONTRACT_ADDRESS].code.second = Utils::cArrayToBytes(create_result.output_data, create_result.output_size);

  evmc_message call_msg{};
  call_msg.kind = evmc_call_kind::EVMC_CALL;

  // Print which accounts exists in the host
  /// Try to call the balanceOf based on the accounts[CONTRACT_ADDRESS].code
  ///auto getBalanceResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
  ///                                     evmc_revision::EVMC_LATEST_STABLE_REVISION, &create_msg,
  ///                                     balanceOf.data(), balanceOf.size());
  // Let's test if we call call balanceOf of ERC20 from another contract... funny :)))

  Bytes getBalContractBytes = Hex::toBytes("608060405234801561000f575f80fd5b506102638061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063c7d85a561461002d575b5f80fd5b61004760048036038101906100429190610141565b61005d565b6040516100549190610197565b60405180910390f35b5f808390508073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161009b91906101bf565b602060405180830381865afa1580156100b6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100da9190610202565b91505092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610110826100e7565b9050919050565b61012081610106565b811461012a575f80fd5b50565b5f8135905061013b81610117565b92915050565b5f8060408385031215610157576101566100e3565b5b5f6101648582860161012d565b92505060206101758582860161012d565b9150509250929050565b5f819050919050565b6101918161017f565b82525050565b5f6020820190506101aa5f830184610188565b92915050565b6101b981610106565b82525050565b5f6020820190506101d25f8301846101b0565b92915050565b6101e18161017f565b81146101eb575f80fd5b50565b5f815190506101fc816101d8565b92915050565b5f60208284031215610217576102166100e3565b5b5f610224848285016101ee565b9150509291505056fea264697066735822122050f09470147bad20c270b0eac2cb6fdcab5c34d48f3f9bf67bb5be54798be20e64736f6c63430008180033");
  evmc_message getBalContractMsg{};
  getBalContractMsg.kind = evmc_call_kind::EVMC_CALL;
  getBalContractMsg.gas = GAS;
  getBalContractMsg.recipient = ANOTHER_CONTRACT_ADDRESS;
  getBalContractMsg.sender = CALLER_ADDRESS;

  auto getBalContractResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                           evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalContractMsg,
                                           getBalContractBytes.data(), getBalContractBytes.size());

  std::cout << "getBalContractResult: " << getBalContractResult.status_code << std::endl;
  std::cout << "getBalContractResult.gas_left: " << getBalContractResult.gas_left << std::endl;
  std::cout << "getBalContractResult.gas used: " << GAS - getBalContractResult.gas_left << std::endl;
  // Commit the code to the account
  host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second = Utils::cArrayToBytes(getBalContractResult.output_data, getBalContractResult.output_size);

  // commit the state of the host to the host
  host.commit();
  // Try calling function getBal(address token, address user)

  Bytes getBalOwner = Hex::toBytes("0xc7d85a5600000000000000000000000020000000000000000000000000000000000000020000000000000000000000001000000000000000000000000000000000000001");
  Bytes getBalOther = Hex::toBytes("0xc7d85a5600000000000000000000000020000000000000000000000000000000000000020000000000000000000000004000000000000000000000000000000000000004");
  evmc_message getBalOwnerMsg{};
  getBalOwnerMsg.kind = evmc_call_kind::EVMC_CALL;
  getBalOwnerMsg.gas = GAS;
  getBalOwnerMsg.recipient = ANOTHER_CONTRACT_ADDRESS;
  getBalOwnerMsg.sender = CALLER_ADDRESS;
  getBalOwnerMsg.code_address = ANOTHER_CONTRACT_ADDRESS;
  getBalOwnerMsg.input_data = getBalOwner.data();
  getBalOwnerMsg.input_size = getBalOwner.size();
  getBalOwnerMsg.gas = GAS;

  evmc_message getBalOtherMsg{};
  getBalOtherMsg.kind = evmc_call_kind::EVMC_CALL;
  getBalOtherMsg.gas = GAS;
  getBalOtherMsg.recipient = ANOTHER_CONTRACT_ADDRESS;
  getBalOtherMsg.sender = ANOTHER_CALLED_ADDRESS;
  getBalOtherMsg.code_address = ANOTHER_CONTRACT_ADDRESS;
  getBalOtherMsg.input_data = getBalOther.data();
  getBalOtherMsg.input_size = getBalOther.size();
  getBalOtherMsg.gas = GAS;

  auto getBalOwnerResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                   evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOwnerMsg,
                                   host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  auto getBalOtherResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                   evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOtherMsg,
                                   host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  

  std::cout << "getBalOwnerResult: " << getBalOwnerResult.status_code << std::endl;
  std::cout << "getBalOwnerResult.gas_left: " << getBalOwnerResult.gas_left << std::endl;
  std::cout << "getBalOwnerResult.gas used: " << GAS - getBalOwnerResult.gas_left << std::endl;

  Bytes getBalOwnerResultData;
  std::copy(getBalOwnerResult.output_data, getBalOwnerResult.output_data + getBalOwnerResult.output_size, std::back_inserter(getBalOwnerResultData));
  std::cout << "getBalOwnerResultData: " << Hex::fromBytes(getBalOwnerResultData) << std::endl;
  std::cout << "getBalOwnerResult uint256_t: " << Utils::bytesToUint256(getBalOwnerResultData) << std::endl;

  std::cout << "getBalOtherResult: " << getBalOtherResult.status_code << std::endl;
  std::cout << "getBalOtherResult.gas_left: " << getBalOtherResult.gas_left << std::endl;
  std::cout << "getBalOtherResult.gas used: " << GAS - getBalOtherResult.gas_left << std::endl;

  Bytes getBalOtherResultData;
  std::copy(getBalOtherResult.output_data, getBalOtherResult.output_data + getBalOtherResult.output_size, std::back_inserter(getBalOtherResultData));
  std::cout << "getBalOtherResultData: " << Hex::fromBytes(getBalOtherResultData) << std::endl;
  std::cout << "getBalOtherResult uint256_t: " << Utils::bytesToUint256(getBalOtherResultData) << std::endl;

  // Let's try moving some tokens
  std::cout << "Trying to transfer some tokens..." << std::endl;

  Bytes transferBytes = Hex::toBytes("a9059cbb00000000000000000000000040000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000989680");
  evmc_message transferMsg{};
  transferMsg.kind = evmc_call_kind::EVMC_CALL;
  transferMsg.gas = GAS;
  transferMsg.recipient = ERC20_CONTRACT_ADDRESS;
  transferMsg.sender = CALLER_ADDRESS;
  transferMsg.code_address = ERC20_CONTRACT_ADDRESS;
  transferMsg.input_data = transferBytes.data();
  transferMsg.input_size = transferBytes.size();
  transferMsg.gas = GAS;

  auto transferResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                   evmc_revision::EVMC_LATEST_STABLE_REVISION, &transferMsg,
                                   host.accounts[ERC20_CONTRACT_ADDRESS].code.second.data(), host.accounts[ERC20_CONTRACT_ADDRESS].code.second.size());

  std::cout << "transferResult: " << transferResult.status_code << std::endl;

  std::cout << "transferResult.gas_left: " << transferResult.gas_left << std::endl;
  std::cout << "transferResult.gas used: " << GAS - transferResult.gas_left << std::endl;

  // Call balance for owner and other again, lets check...
  auto getBalOwnerResult2 = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                   evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOwnerMsg,
                                   host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  auto getBalOtherResult2 = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                    evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOtherMsg,
                                    host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  std::cout << "getBalOwnerResult2: " << getBalOwnerResult2.status_code << std::endl;

  std::cout << "getBalOwnerResult2.gas_left: " << getBalOwnerResult2.gas_left << std::endl;
  std::cout << "getBalOwnerResult2.gas used: " << GAS - getBalOwnerResult2.gas_left << std::endl;

  Bytes getBalOwnerResultData2;
  std::copy(getBalOwnerResult2.output_data, getBalOwnerResult2.output_data + getBalOwnerResult2.output_size, std::back_inserter(getBalOwnerResultData2));
  std::cout << "getBalOwnerResultData2: " << Hex::fromBytes(getBalOwnerResultData2) << std::endl;
  std::cout << "getBalOwnerResult2 uint256_t: " << Utils::bytesToUint256(getBalOwnerResultData2) << std::endl;

  std::cout << "getBalOtherResult2: " << getBalOtherResult2.status_code << std::endl;
  std::cout << "getBalOtherResult2.gas_left: " << getBalOtherResult2.gas_left << std::endl;
  std::cout << "getBalOtherResult2.gas used: " << GAS - getBalOtherResult2.gas_left << std::endl;

  Bytes getBalOtherResultData2;
  std::copy(getBalOtherResult2.output_data, getBalOtherResult2.output_data + getBalOtherResult2.output_size, std::back_inserter(getBalOtherResultData2));
  std::cout << "getBalOtherResultData2: " << Hex::fromBytes(getBalOtherResultData2) << std::endl;
  std::cout << "getBalOtherResult2 uint256_t: " << Utils::bytesToUint256(getBalOtherResultData2) << std::endl;

  // Call revert function
  std::cout << "Reversting host..." << std::endl;
  host.revert();

  // Call balance for owner and other again, lets check...

  auto getBalOwnerResult3 = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                   evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOwnerMsg,
                                   host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  auto getBalOtherResult3 = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                    evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOtherMsg,
                                    host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  std::cout << "getBalOwnerResult3: " << getBalOwnerResult3.status_code << std::endl;
  std::cout << "getBalOwnerResult3.gas_left: " << getBalOwnerResult3.gas_left << std::endl;
  std::cout << "getBalOwnerResult3.gas used: " << GAS - getBalOwnerResult3.gas_left << std::endl;

  Bytes getBalOwnerResultData3;
  std::copy(getBalOwnerResult3.output_data, getBalOwnerResult3.output_data + getBalOwnerResult3.output_size, std::back_inserter(getBalOwnerResultData3));

  std::cout << "getBalOwnerResultData3: " << Hex::fromBytes(getBalOwnerResultData3) << std::endl;
  std::cout << "getBalOwnerResult3 uint256_t: " << Utils::bytesToUint256(getBalOwnerResultData3) << std::endl;

  std::cout << "getBalOtherResult3: " << getBalOtherResult3.status_code << std::endl;
  std::cout << "getBalOtherResult3.gas_left: " << getBalOtherResult3.gas_left << std::endl;
  std::cout << "getBalOtherResult3.gas used: " << GAS - getBalOtherResult3.gas_left << std::endl;

  Bytes getBalOtherResultData3;
  std::copy(getBalOtherResult3.output_data, getBalOtherResult3.output_data + getBalOtherResult3.output_size, std::back_inserter(getBalOtherResultData3));

  std::cout << "getBalOtherResultData3: " << Hex::fromBytes(getBalOtherResultData3) << std::endl;
  std::cout << "getBalOtherResult3 uint256_t: " << Utils::bytesToUint256(getBalOtherResultData3) << std::endl;

  // Call execute again with the transfer and now commit on the host after

  auto transferResult2 = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                   evmc_revision::EVMC_LATEST_STABLE_REVISION, &transferMsg,
                                   host.accounts[ERC20_CONTRACT_ADDRESS].code.second.data(), host.accounts[ERC20_CONTRACT_ADDRESS].code.second.size());

  std::cout << "transferResult2: " << transferResult2.status_code << std::endl;
  std::cout << "transferResult2.gas_left: " << transferResult2.gas_left << std::endl;
  std::cout << "transferResult2.gas used: " << GAS - transferResult2.gas_left << std::endl;

  host.commit();

  // Call balance for owner and other again, lets check...

  auto getBalOwnerResult4 = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                   evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOwnerMsg,
                                   host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  auto getBalOtherResult4 = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                    evmc_revision::EVMC_LATEST_STABLE_REVISION, &getBalOtherMsg,
                                    host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ANOTHER_CONTRACT_ADDRESS].code.second.size());

  std::cout << "getBalOwnerResult4: " << getBalOwnerResult4.status_code << std::endl;
  std::cout << "getBalOwnerResult4.gas_left: " << getBalOwnerResult4.gas_left << std::endl;
  std::cout << "getBalOwnerResult4.gas used: " << GAS - getBalOwnerResult4.gas_left << std::endl;

  Bytes getBalOwnerResultData4;
  std::copy(getBalOwnerResult4.output_data, getBalOwnerResult4.output_data + getBalOwnerResult4.output_size, std::back_inserter(getBalOwnerResultData4));

  std::cout << "getBalOwnerResultData4: " << Hex::fromBytes(getBalOwnerResultData4) << std::endl;
  std::cout << "getBalOwnerResult4 uint256_t: " << Utils::bytesToUint256(getBalOwnerResultData4) << std::endl;

  std::cout << "getBalOtherResult4: " << getBalOtherResult4.status_code << std::endl;
  std::cout << "getBalOtherResult4.gas_left: " << getBalOtherResult4.gas_left << std::endl;
  std::cout << "getBalOtherResult4.gas used: " << GAS - getBalOtherResult4.gas_left << std::endl;

  Bytes getBalOtherResultData4;
  std::copy(getBalOtherResult4.output_data, getBalOtherResult4.output_data + getBalOtherResult4.output_size, std::back_inserter(getBalOtherResultData4));

  std::cout << "getBalOtherResultData4: " << Hex::fromBytes(getBalOtherResultData4) << std::endl;
  std::cout << "getBalOtherResult4 uint256_t: " << Utils::bytesToUint256(getBalOtherResultData4) << std::endl;



  // Try to make a transaction that sends a **value** to the contract
  evmc_message sendValueMsg{};
  sendValueMsg.kind = evmc_call_kind::EVMC_CALL;
  sendValueMsg.gas = GAS;
  sendValueMsg.recipient = ANOTHER_CALLED_ADDRESS;
  sendValueMsg.sender = CALLER_ADDRESS;
  sendValueMsg.gas = GAS;
  evmc_uint256be value = {};
  BytesArr<32> valueArr = Utils::uint256ToBytes(uint256_t(10000000000));
  std::copy(valueArr.begin(), valueArr.end(), value.bytes);
  sendValueMsg.value = value;
  // Give the caller some value
  Bytes callerAddrBytes;
  // Copy 20 bytes from CALLER_ADDRESS to the callerAddrBytes
  std::copy(CALLER_ADDRESS.bytes, CALLER_ADDRESS.bytes + 20, std::back_inserter(callerAddrBytes));
  Address callerAddr(callerAddrBytes);
  host.setBalance(callerAddr, 100000000000);

  auto sendValueResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                      evmc_revision::EVMC_LATEST_STABLE_REVISION, &sendValueMsg,
                                      nullptr,0);

  std::cout << "sendValueResult: " << sendValueResult.status_code << std::endl;
  std::cout << "sendValueResult.gas_left: " << sendValueResult.gas_left << std::endl;
  std::cout << "sendValueResult.gas used: " << GAS - sendValueResult.gas_left << std::endl;


  Bytes randomAddressBytes = Utils::randBytes(20);
  Address randomAddress(randomAddressBytes);
  std::cout << "Random address: " << randomAddress.hex(true) << std::endl;
  evmc_address randomEvmcAddress = randomAddress.toEvmcAddress();
  Bytes evmcAddressBytes;
  std::copy(randomEvmcAddress.bytes, randomEvmcAddress.bytes + 20, std::back_inserter(evmcAddressBytes));
  std::cout << "Random address from evmc: " << Hex::fromBytes(evmcAddressBytes) << std::endl;
  Hash hash = Hash::random();
  std::cout << "Random hash: " << hash.hex(true) << std::endl;
  evmc_bytes32 evmcBytes32 = hash.toEvmcBytes32();
  Bytes evmcBytes32Bytes;
  std::copy(evmcBytes32.bytes, evmcBytes32.bytes + 32, std::back_inserter(evmcBytes32Bytes));
  std::cout << "Random hash from evmc: " << Hex::fromBytes(evmcBytes32Bytes) << std::endl;
  uint256_t uint256("123456789");
  std::cout << "uint256: " << uint256 << std::endl;
  evmc_uint256be evmcUint256 = Utils::uint256ToEvmcUint256(uint256);
  Bytes evmcUint256Bytes;
  std::copy(evmcUint256.bytes, evmcUint256.bytes + 32, std::back_inserter(evmcUint256Bytes));
  uint256_t uint256FromEvmc = Utils::bytesToUint256(evmcUint256Bytes);
  std::cout << "uint256 from evmc: " << uint256FromEvmc << std::endl;
  evmc_uint256be evmcUint256FromHash = Utils::bytesToEvmcUint256(hash.view());
  Bytes evmcUint256FromHashBytes;
  std::copy(evmcUint256FromHash.bytes, evmcUint256FromHash.bytes + 32, std::back_inserter(evmcUint256FromHashBytes));
  uint256_t uint256FromHash = Utils::bytesToUint256(evmcUint256FromHashBytes);
  std::cout << "uint256 from hash: " << uint256FromHash << std::endl;
  Hash hashFromEvmcUint256 = Utils::evmcUint256ToBytes(evmcUint256);
  std::cout << "hash from evmc uint256: " << hashFromEvmcUint256.hex(true) << std::endl;

  Bytes ecRecoverContract = Hex::toBytes("608060405234801561000f575f80fd5b506103018061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063c2bf17b01461002d575b5f80fd5b61004760048036038101906100429190610159565b61005d565b60405161005491906101fc565b60405180910390f35b5f6510000000000173ffffffffffffffffffffffffffffffffffffffff16633ee6ac9e868686866040518563ffffffff1660e01b81526004016100a39493929190610233565b602060405180830381865afa1580156100be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100e291906102a0565b9050949350505050565b5f80fd5b5f819050919050565b610102816100f0565b811461010c575f80fd5b50565b5f8135905061011d816100f9565b92915050565b5f60ff82169050919050565b61013881610123565b8114610142575f80fd5b50565b5f813590506101538161012f565b92915050565b5f805f8060808587031215610171576101706100ec565b5b5f61017e8782880161010f565b945050602061018f87828801610145565b93505060406101a08782880161010f565b92505060606101b18782880161010f565b91505092959194509250565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101e6826101bd565b9050919050565b6101f6816101dc565b82525050565b5f60208201905061020f5f8301846101ed565b92915050565b61021e816100f0565b82525050565b61022d81610123565b82525050565b5f6080820190506102465f830187610215565b6102536020830186610224565b6102606040830185610215565b61026d6060830184610215565b95945050505050565b61027f816101dc565b8114610289575f80fd5b50565b5f8151905061029a81610276565b92915050565b5f602082840312156102b5576102b46100ec565b5b5f6102c28482850161028c565b9150509291505056fea26469706673582212203f4f7805af6b57b9d35d68dd078bb0f0c7b58d555f7b06c057f515a6511ba83064736f6c63430008180033");

  evmc_message ecRecoverMsg{};
  ecRecoverMsg.kind = evmc_call_kind::EVMC_CALL;
  ecRecoverMsg.gas = GAS;
  ecRecoverMsg.recipient = ECRECOVER_CONTRACT_ADDRESS;
  ecRecoverMsg.sender = CALLER_ADDRESS;

  auto ecRecoverResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                      evmc_revision::EVMC_LATEST_STABLE_REVISION, &ecRecoverMsg,
                                      ecRecoverContract.data(), ecRecoverContract.size());

  std::cout << "ecRecoverResult: " << ecRecoverResult.status_code << std::endl;
  std::cout << "ecRecoverResult.gas_left: " << ecRecoverResult.gas_left << std::endl;
  std::cout << "ecRecoverResult.gas used: " << GAS - ecRecoverResult.gas_left << std::endl;

  // Put the code into the account
  host.accounts[ECRECOVER_CONTRACT_ADDRESS].code.second = Utils::cArrayToBytes(ecRecoverResult.output_data, ecRecoverResult.output_size);


  Bytes ecRecoverTryExecuting = Hex::toBytes("c2bf17b0383e876328a5e13335ee2f4baf85782293e849f67552e06dc0923e2dfd2e9186000000000000000000000000000000000000000000000000000000000000001c7188aba1ebd9a97617005e20170d7195b1790dc284f33efe21038ac5545b6c666beb1faee29f69929b8d7f122a525889b8dd685f9957dff29f4894927b849da7");

  evmc_message ecRecoverTryExecutingMsg{};
  ecRecoverTryExecutingMsg.kind = evmc_call_kind::EVMC_CALL;
  ecRecoverTryExecutingMsg.gas = GAS;
  ecRecoverTryExecutingMsg.recipient = ECRECOVER_CONTRACT_ADDRESS;
  ecRecoverTryExecutingMsg.sender = CALLER_ADDRESS;
  ecRecoverTryExecutingMsg.code_address = ECRECOVER_CONTRACT_ADDRESS;
  ecRecoverTryExecutingMsg.input_data = ecRecoverTryExecuting.data();
  ecRecoverTryExecutingMsg.input_size = ecRecoverTryExecuting.size();

  auto ecRecoverTryExecutingResult = evmc_execute(vm, &host.get_interface(), (evmc_host_context*)&host,
                                                  evmc_revision::EVMC_LATEST_STABLE_REVISION, &ecRecoverTryExecutingMsg,
                                                  host.accounts[ECRECOVER_CONTRACT_ADDRESS].code.second.data(), host.accounts[ECRECOVER_CONTRACT_ADDRESS].code.second.size());

  std::cout << "ecRecoverTryExecutingResult: " << ecRecoverTryExecutingResult.status_code << std::endl;
  std::cout << "ecRecoverTryExecutingResult.gas_left: " << ecRecoverTryExecutingResult.gas_left << std::endl;
  std::cout << "ecRecoverTryExecutingResult.gas used: " << GAS - ecRecoverTryExecutingResult.gas_left << std::endl;
  Bytes outputData;
  std::copy(ecRecoverTryExecutingResult.output_data, ecRecoverTryExecutingResult.output_data + ecRecoverTryExecutingResult.output_size, std::back_inserter(outputData));
  std::cout << "ecRecoverTryExecutingResult.output_data: " << Hex::fromBytes(outputData) << std::endl;

  return 0;
  Utils::logToCout = true;
  std::string blockchainPath = std::filesystem::current_path().string() + std::string("/blockchain");
  blockchain = std::make_unique<Blockchain>(blockchainPath);
  // Start the blockchain syncing engine.
  std::signal(SIGINT, signalHandler);
  std::signal(SIGHUP, signalHandler);
  blockchain->start();
  std::this_thread::sleep_until(std::chrono::system_clock::now() + std::chrono::hours(std::numeric_limits<int>::max()));
  return 0;
}

