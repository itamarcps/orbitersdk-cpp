/*
Copyright (c) [2023-2024] [Sparq Network]

This software is distributed under the MIT License.
See the LICENSE.txt file in the project root for more information.
*/

#include "../../src/libs/catch2/catch_amalgamated.hpp"
#include "../../src/contract/templates/erc20.h"
#include "../../src/contract/abi.h"
#include "../../src/utils/db.h"
#include "../../src/utils/options.h"
#include "../../src/contract/contractmanager.h"
#include "../../src/core/rdpos.h"

#include "../sdktestsuite.hpp"

#include <filesystem>

// TODO: test events if/when implemented

namespace TERC20 {
  TEST_CASE("EVMOne Class", "[contract][evmone]") {
    SECTION("EVMOne AIO Test") {
      TestAccount toAccount = TestAccount::newRandomAccount();
      uint256_t finalOwnerNativeBal = 0;
      uint256_t finalRecipientNativeBal = 0;
      uint256_t finalOwnerTokenBal = 0;
      uint256_t finalRecipientTokenBal = 0;
      uint256_t finalOwnerNonce = 0;
      uint256_t finalRecipientNonce = 0;
      Hash createTxHash = Hash();
      Address ERC20Address = Address();
      {
        SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("TestEVMOne_ERC20");
        const auto erc20CreateBytes = Hex::toBytes("");
        // const TestAccount& from, const Address& to, const uint256_t& value, Bytes data = Bytes()
        auto createTx = sdk.createNewTx(sdk.getChainOwnerAccount(), Address(), 0, erc20CreateBytes);
        std::cout << "test txDataSize: " << createTx.getData().size() << std::endl;
        auto gas = sdk.estimateGas(createTx);

        std::cout << "test gas: " << gas << std::endl;
        REQUIRE(sdk.getEvmContracts().empty());
        REQUIRE(sdk.getEvmContractAddress(createTx.hash()) == Address());

        sdk.advanceChain(0, {createTx});
        REQUIRE(sdk.getEvmContracts().size() == 1);
        REQUIRE(sdk.getEvmContractAddress(createTx.hash()) != Address());
        createTxHash = createTx.hash();
        auto contractAddress = sdk.getEvmContractAddress(createTxHash);
        REQUIRE(sdk.isEvmContract(contractAddress));
        ERC20Address = contractAddress;
        // Try calling get balance, technically we are ABI compatible!
        finalOwnerTokenBal = sdk.callViewFunction(contractAddress, &ERC20::balanceOf, sdk.getChainOwnerAccount().address);
        std::cout << "test ownerBalance: " << finalOwnerTokenBal << std::endl;
        // now try transfering the token!!!
        auto transferTx = sdk.callFunction(contractAddress, &ERC20::transfer, toAccount.address, uint256_t(1000000000));
        // Now get owner and user balance again...
        finalOwnerTokenBal = sdk.callViewFunction(contractAddress, &ERC20::balanceOf, sdk.getChainOwnerAccount().address);
        finalRecipientTokenBal = sdk.callViewFunction(contractAddress, &ERC20::balanceOf, toAccount.address);
        finalOwnerNativeBal = sdk.getNativeBalance(sdk.getChainOwnerAccount().address);
        finalRecipientNativeBal = sdk.getNativeBalance(toAccount.address);
        finalRecipientNonce = sdk.getNativeNonce(toAccount.address);
        finalOwnerNonce = sdk.getNativeNonce(sdk.getChainOwnerAccount().address);
        std::cout << "test ownerBalanceAfter: " << finalRecipientTokenBal << std::endl;
        std::cout << "test toBalance: " << finalRecipientTokenBal << std::endl;
      }
      std::cout << "dump to DB successfull" << std::endl;

      // Try loading the State again
      SDKTestSuite sdk = SDKTestSuite::loadEnvironment("TestEVMOne_ERC20");
      REQUIRE(sdk.isEvmContract(ERC20Address));
      uint256_t loadedOwnerNativeBal = sdk.getNativeBalance(sdk.getChainOwnerAccount().address);
      uint256_t loadedRecipientNativeBal = sdk.getNativeBalance(toAccount.address);
      uint256_t loadedOwnerTokenBal = sdk.callViewFunction(ERC20Address, &ERC20::balanceOf, sdk.getChainOwnerAccount().address);
      uint256_t loadedRecipientTokenBal = sdk.callViewFunction(ERC20Address, &ERC20::balanceOf, toAccount.address);
      uint256_t loadedOwnerNonce = sdk.getNativeNonce(sdk.getChainOwnerAccount().address);
      uint256_t loadedRecipientNonce = sdk.getNativeNonce(toAccount.address);
      auto loadedContractAddress = sdk.getEvmContractAddress(createTxHash);
      REQUIRE(loadedOwnerNativeBal == finalOwnerNativeBal);
      REQUIRE(loadedRecipientNativeBal == finalRecipientNativeBal);
      REQUIRE(loadedOwnerTokenBal == finalOwnerTokenBal);
      REQUIRE(loadedRecipientTokenBal == finalRecipientTokenBal);
      REQUIRE(loadedOwnerNonce == finalOwnerNonce);
      REQUIRE(loadedRecipientNonce == finalRecipientNonce);
      std::cout << "createTxHash: " << createTxHash.hex(true) << std::endl;
      std::cout << "loadedContractAddress: " << loadedContractAddress.hex(true) << std::endl;
      std::cout << "ERC20Address: " << ERC20Address.hex(true) << std::endl;
      REQUIRE(loadedContractAddress == ERC20Address);
      // Now try to transfer the token again
      auto loadedTransferTx = sdk.callFunction(loadedContractAddress, &ERC20::transfer, toAccount.address, uint256_t(1000000000));
      // Now get owner and user balance again...
      uint256_t loadedOwnerTokenBalAfter = sdk.callViewFunction(loadedContractAddress, &ERC20::balanceOf, sdk.getChainOwnerAccount().address);
      uint256_t loadedRecipientTokenBalAfter = sdk.callViewFunction(loadedContractAddress, &ERC20::balanceOf, toAccount.address);
      uint256_t loadedOwnerNativeBalAfter = sdk.getNativeBalance(sdk.getChainOwnerAccount().address);
      uint256_t loadedRecipientNativeBalAfter = sdk.getNativeBalance(toAccount.address);
      uint256_t loadedRecipientNonceAfter = sdk.getNativeNonce(toAccount.address);
      uint256_t loadedOwnerNonceAfter = sdk.getNativeNonce(sdk.getChainOwnerAccount().address);

      REQUIRE(loadedOwnerTokenBalAfter == finalOwnerTokenBal - 1000000000);
      REQUIRE(loadedRecipientTokenBalAfter == finalRecipientTokenBal + 1000000000);
      REQUIRE(loadedOwnerNativeBalAfter < finalOwnerNativeBal);
      REQUIRE(loadedRecipientNativeBalAfter == finalRecipientNativeBal);
      REQUIRE(loadedRecipientNonceAfter == finalRecipientNonce);
      REQUIRE(loadedOwnerNonceAfter == finalOwnerNonce + 1);
      // Sanity Check
      REQUIRE(loadedRecipientNonce == 0);
      REQUIRE(loadedRecipientNativeBal == 0);
    }
  }
}