/*
  Copyright (c) [2023-2024] [Sparq Network]
  This software is distributed under the MIT License.
  See the LICENSE.txt file in the project root for more information.
*/

#include "../../src/libs/catch2/catch_amalgamated.hpp"
#include "../../src/contract/templates/erc721mint.h"
#include "../../src/contract/abi.h"
#include "../../src/utils/db.h"
#include "../../src/utils/options.h"
#include "../../src/contract/contractmanager.h"
#include "../../src/core/rdpos.h"
#include "../sdktestsuite.hpp"

Bytes createMessage (const uint256_t& tokenId, const Address& user, uint256_t rarity) {
  Bytes value;
  value.reserve(52); // 32 bytes for tokenId and 20 bytes for user
  Utils::appendBytes(value, Utils::uint256ToBytes(tokenId));
  Utils::appendBytes(value, user.asBytes());
  Utils::appendBytes(value, Utils::uint256ToBytes(rarity));
  return value;
}

Hash _toTyped32ByteDataHash (const Hash& messageHash) {
  Bytes value;
  value.insert(value.end(), 0x19);
  std::string ethereumSignedMessage = "Ethereum Signed Message:";
  Utils::appendBytes(value, ethereumSignedMessage);
  value.insert(value.end(), '\n');
  Utils::appendBytes(value, std::to_string(32));
  Utils::appendBytes(value, messageHash);
  std::cout << "_toTyped32ByteDataHash: " << Hex::fromBytes(value) << std::endl;
  return Utils::sha3(value);
}


namespace TERC721 {
  TEST_CASE("ERC721Mint Class", "[contract][erc721mint]") {

    PrivKey signerKey(Hex::toBytes("0x1b2151ea1c4c24ee3c61ab5d37e383caf1b81a9ce895de9aba9119eb0233123d"));
    Address signerAddress(Secp256k1::toAddress(Secp256k1::toUPub(signerKey)));

    SECTION("ERC721Mint Creation, PreBurn, Burn") {
      std::cout << "Signed Address: " << signerAddress.hex(true) << std::endl;
      std::cout << "Signer Privkey: " << signerKey.hex() << std::endl;
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreation");
      auto ERC721MintAddress = sdk.deployContract<ERC721Mint>(std::string("My Test NFT!"), std::string("NFT"), uint256_t(10000), signerAddress, std::string("http://localhost/"));
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "My Test NFT!");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "NFT");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      std::string tokenURI = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::tokenURI, uint256_t(0));
      std::string baseURI = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::_baseURI);
      std::cout << "BaseURI: " << baseURI << std::endl;
      REQUIRE(events.size() == 0);
      REQUIRE(tokenURI == "http://localhost/bronze");
      REQUIRE(baseURI == "http://localhost/");

      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address, uint256_t>(events[0].getData());
      const auto& [tokenIdBurn, userBurn, userRarity] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn, userRarity));
      auto messageHash = _toTyped32ByteDataHash(hash);

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;
      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS, rarity] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));
      std::cout << "Rarity: " << rarity << std::endl;
    }

    SECTION("ERC721Mint Creation, PreBurn, Burn EVM") {
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreationEVM");
      const auto erc721CreateBytes = Hex::toBytes("0x60c060405234801562000010575f80fd5b5060405162003f8338038062003f8383398181016040528101906200003691906200038a565b6040518060400160405280600f81526020017f4d79546f6b656e4d696e7461626c6500000000000000000000000000000000008152506040518060400160405280600381526020017f4d544d0000000000000000000000000000000000000000000000000000000000815250815f9081620000b2919062000630565b508060019081620000c4919062000630565b5050503360095f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806006908162000118919062000630565b505f6007819055505f60088190555082608081815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000714565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b62000191816200017d565b81146200019c575f80fd5b50565b5f81519050620001af8162000186565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001e082620001b5565b9050919050565b620001f281620001d4565b8114620001fd575f80fd5b50565b5f815190506200021081620001e7565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b62000266826200021e565b810181811067ffffffffffffffff821117156200028857620002876200022e565b5b80604052505050565b5f6200029c6200016c565b9050620002aa82826200025b565b919050565b5f67ffffffffffffffff821115620002cc57620002cb6200022e565b5b620002d7826200021e565b9050602081019050919050565b5f5b8381101562000303578082015181840152602081019050620002e6565b5f8484015250505050565b5f620003246200031e84620002af565b62000291565b9050828152602081018484840111156200034357620003426200021a565b5b62000350848285620002e4565b509392505050565b5f82601f8301126200036f576200036e62000216565b5b8151620003818482602086016200030e565b91505092915050565b5f805f60608486031215620003a457620003a362000175565b5b5f620003b3868287016200019f565b9350506020620003c68682870162000200565b925050604084015167ffffffffffffffff811115620003ea57620003e962000179565b5b620003f88682870162000358565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200045157607f821691505b6020821081036200046757620004666200040c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200048e565b620004d786836200048e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f62000518620005126200050c846200017d565b620004ef565b6200017d565b9050919050565b5f819050919050565b6200053383620004f8565b6200054b62000542826200051f565b8484546200049a565b825550505050565b5f90565b6200056162000553565b6200056e81848462000528565b505050565b5b818110156200059557620005895f8262000557565b60018101905062000574565b5050565b601f821115620005e457620005ae816200046d565b620005b9846200047f565b81016020851015620005c9578190505b620005e1620005d8856200047f565b83018262000573565b50505b505050565b5f82821c905092915050565b5f620006065f1984600802620005e9565b1980831691505092915050565b5f620006208383620005f5565b9150826002028217905092915050565b6200063b8262000402565b67ffffffffffffffff8111156200065757620006566200022e565b5b62000663825462000439565b6200067082828562000599565b5f60209050601f831160018114620006a6575f841562000691578287015190505b6200069d858262000613565b8655506200070c565b601f198416620006b6866200046d565b5f5b82811015620006df57848901518255600182019150602085019450602081019050620006b8565b86831015620006ff5784890151620006fb601f891682620005f5565b8355505b6001600288020188555050505b505050505050565b60805160a05161383f620007445f395f818161073a01526112ce01525f8181610bfa0152611032015261383f5ff3fe608060405234801561000f575f80fd5b5060043610610156575f3560e01c80636352211e116100c1578063b88d4fde1161007a578063b88d4fde146103d4578063c87b56dd146103f0578063d5abeb0114610420578063dcc09a3e1461043e578063e985e9c51461046e578063fcc82dc21461049e57610156565b80636352211e146103005780636a6278421461033057806370a082311461034c57806395d89b411461037c57806398bdf6f51461039a578063a22cb465146103b857610156565b8063238ac93311610113578063238ac9331461024257806323b872dd14610260578063343333621461027c57806342842e0e1461029857806355f804b3146102b457806362b6b5bf146102d057610156565b806301ffc9a71461015a57806306fdde031461018a578063081812fc146101a8578063095ea7b3146101d857806318160ddd146101f45780631c348dd314610212575b5f80fd5b610174600480360381019061016f919061266d565b6104ba565b60405161018191906126b2565b60405180910390f35b61019261059b565b60405161019f9190612755565b60405180910390f35b6101c260048036038101906101bd91906127a8565b61062a565b6040516101cf9190612812565b60405180910390f35b6101f260048036038101906101ed9190612855565b610645565b005b6101fc61065b565b60405161020991906128a2565b60405180910390f35b61022c600480360381019061022791906127a8565b610664565b6040516102399190612994565b60405180910390f35b61024a610737565b6040516102579190612812565b60405180910390f35b61027a600480360381019061027591906129ad565b61075e565b005b610296600480360381019061029191906127a8565b61085d565b005b6102b260048036038101906102ad91906129ad565b610a53565b005b6102ce60048036038101906102c99190612b29565b610a72565b005b6102ea60048036038101906102e591906127a8565b610b14565b6040516102f79190612994565b60405180910390f35b61031a600480360381019061031591906127a8565b610be7565b6040516103279190612812565b60405180910390f35b61034a60048036038101906103459190612b70565b610bf8565b005b61036660048036038101906103619190612b70565b610da2565b60405161037391906128a2565b60405180910390f35b610384610e58565b6040516103919190612755565b60405180910390f35b6103a2610ee8565b6040516103af91906128a2565b60405180910390f35b6103d260048036038101906103cd9190612bc5565b610ef1565b005b6103ee60048036038101906103e99190612ca1565b610f07565b005b61040a600480360381019061040591906127a8565b610f24565b6040516104179190612755565b60405180910390f35b61042861102f565b60405161043591906128a2565b60405180910390f35b61045860048036038101906104539190612d21565b611056565b6040516104659190612d80565b60405180910390f35b61048860048036038101906104839190612d99565b6110f0565b60405161049591906126b2565b60405180910390f35b6104b860048036038101906104b39190612e2b565b61117e565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061058457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610594575061059382611518565b5b9050919050565b60605f80546105a990612ebc565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590612ebc565b80156106205780601f106105f757610100808354040283529160200191610620565b820191905f5260205f20905b81548152906001019060200180831161060357829003601f168201915b5050505050905090565b5f61063482611581565b5061063e82611607565b9050919050565b6106578282610652611640565b611647565b5050565b5f600854905090565b61066c6125b6565b600b5f8381526020019081526020015f206040518060c00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff16815260200160018201548152602001600282015481526020016003820154815250509050919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107ce575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016107c59190612812565b60405180910390fd5b5f6107e183836107dc611640565b611659565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610857578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161084e93929190612eec565b60405180910390fd5b50505050565b61086681610be7565b73ffffffffffffffffffffffffffffffffffffffff16610884611640565b73ffffffffffffffffffffffffffffffffffffffff16146108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190612f91565b60405180910390fd5b6108e381611864565b6040518060c001604052806001151581526020016108ff611640565b73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f801b81526020015f801b8152602001600c5f8481526020019081526020015f2054815250600a5f8381526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff160217905550606082015181600101556080820151816002015560a082015181600301559050507f9d3bd8ca6857d62b093fc756ed48d15bcccbe17031d64613798b025d9242623a81610a27611640565b600c5f8581526020019081526020015f2054604051610a4893929190612faf565b60405180910390a150565b610a6d83838360405180602001604052805f815250610f07565b505050565b3373ffffffffffffffffffffffffffffffffffffffff1660095f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af89061302e565b60405180910390fd5b8060069081610b1091906131e9565b5050565b610b1c6125b6565b600a5f8381526020019081526020015f206040518060c00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff16815260200160018201548152602001600282015481526020016003820154815250509050919050565b5f610bf182611581565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000060075410610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5390613328565b60405180910390fd5b610c68816007546118e6565b5f61271073100000000000000000000000000010000000000373ffffffffffffffffffffffffffffffffffffffff1663aacc5a176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ced919061335a565b610cf791906133b2565b90505f80606483610d0891906133b2565b03610d165760019050610d30565b5f6103e883610d2591906133b2565b03610d2f57600290505b5b80600c5f60075481526020019081526020015f2081905550610d6f600754610d6a600c5f60075481526020019081526020015f2054611903565b611a13565b60075f815480929190610d819061340f565b919050555060085f815480929190610d989061340f565b9190505550505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e13575f6040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610e0a9190612812565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b606060018054610e6790612ebc565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9390612ebc565b8015610ede5780601f10610eb557610100808354040283529160200191610ede565b820191905f5260205f20905b815481529060010190602001808311610ec157829003601f168201915b5050505050905090565b5f600754905090565b610f03610efc611640565b8383611a6d565b5050565b610f1284848461075e565b610f1e84848484611bd6565b50505050565b6060610f2f82611581565b505f600d5f8481526020019081526020015f208054610f4d90612ebc565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7990612ebc565b8015610fc45780601f10610f9b57610100808354040283529160200191610fc4565b820191905f5260205f20905b815481529060010190602001808311610fa757829003601f168201915b505050505090505f610fd4611d88565b90505f815103610fe857819250505061102a565b5f8251111561101c578082604051602001611004929190613490565b6040516020818303038152906040529250505061102a565b61102584611e18565b925050505b919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f73100000000000000000000000000010000000000273ffffffffffffffffffffffffffffffffffffffff1663aa6351cc8585856040518463ffffffff1660e01b81526004016110a893929190612faf565b602060405180830381865afa1580156110c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110e791906134c7565b90509392505050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b600a5f8581526020019081526020015f205f015f9054906101000a900460ff166111dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d490613562565b60405180910390fd5b5f61122d85600a5f8881526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c5f8981526020019081526020015f2054611056565b90505f73100000000000000000000000000010000000000173ffffffffffffffffffffffffffffffffffffffff16633ee6ac9e61126984611e7e565b8787876040518563ffffffff1660e01b815260040161128b949392919061358f565b602060405180830381865afa1580156112a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112ca91906135e6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135190613681565b60405180910390fd5b6040518060c00160405280600115158152602001600a5f8981526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018660ff168152602001858152602001848152602001600c5f8981526020019081526020015f2054815250600b5f8881526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff160217905550606082015181600101556080820151816002015560a08201518160030155905050600a5f8781526020019081526020015f205f8082015f6101000a81549060ff02191690555f820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555f820160156101000a81549060ff0219169055600182015f9055600282015f9055600382015f90555050505050505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8061158c83611f12565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115fe57826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016115f591906128a2565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b6116548383836001611f4b565b505050565b5f8061166484611f12565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146116a5576116a481848661210a565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611730576116e45f855f80611f4b565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146117af57600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f6118705f835f611659565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118e257816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016118d991906128a2565b60405180910390fd5b5050565b6118ff828260405180602001604052805f8152506121cd565b5050565b60605f8203611949576040518060400160405280600681526020017f62726f6e7a6500000000000000000000000000000000000000000000000000008152509050611a0e565b6001820361198e576040518060400160405280600681526020017f73696c76657200000000000000000000000000000000000000000000000000008152509050611a0e565b600282036119d3576040518060400160405280600481526020017f676f6c64000000000000000000000000000000000000000000000000000000008152509050611a0e565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a05906136e9565b60405180910390fd5b919050565b80600d5f8481526020019081526020015f209081611a3191906131e9565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611a6191906128a2565b60405180910390a15050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611add57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401611ad49190612812565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611bc991906126b2565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b1115611d82578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c19611640565b8685856040518563ffffffff1660e01b8152600401611c3b9493929190613759565b6020604051808303815f875af1925050508015611c7657506040513d601f19601f82011682018060405250810190611c7391906137b7565b60015b611cf7573d805f8114611ca4576040519150601f19603f3d011682016040523d82523d5f602084013e611ca9565b606091505b505f815103611cef57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611ce69190612812565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611d8057836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611d779190612812565b60405180910390fd5b505b50505050565b606060068054611d9790612ebc565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc390612ebc565b8015611e0e5780601f10611de557610100808354040283529160200191611e0e565b820191905f5260205f20905b815481529060010190602001808311611df157829003601f168201915b5050505050905090565b6060611e2382611581565b505f611e2d611d88565b90505f815111611e4b5760405180602001604052805f815250611e76565b80611e55846121e8565b604051602001611e66929190613490565b6040516020818303038152906040525b915050919050565b5f73100000000000000000000000000010000000000273ffffffffffffffffffffffffffffffffffffffff1663518af8db836040518263ffffffff1660e01b8152600401611ecc9190612d80565b602060405180830381865afa158015611ee7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f0b91906134c7565b9050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611f8357505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156120b5575f611f9284611581565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611ffc57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561200f575061200d81846110f0565b155b1561205157826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016120489190612812565b60405180910390fd5b81156120b357838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6121158383836122b2565b6121c8575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361218957806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161218091906128a2565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016121bf9291906137e2565b60405180910390fd5b505050565b6121d78383612372565b6121e35f848484611bd6565b505050565b60605f60016121f684612465565b0190505f8167ffffffffffffffff81111561221457612213612a05565b5b6040519080825280601f01601f1916602001820160405280156122465781602001600182028036833780820191505090505b5090505f82602001820190505b6001156122a7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161229c5761229b613385565b5b0494505f8503612253575b819350505050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561236957508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061232a575061232984846110f0565b5b8061236857508273ffffffffffffffffffffffffffffffffffffffff1661235083611607565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036123e2575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016123d99190612812565b60405180910390fd5b5f6123ee83835f611659565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612460575f6040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016124579190612812565b60405180910390fd5b505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106124c1577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816124b7576124b6613385565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106124fe576d04ee2d6d415b85acef810000000083816124f4576124f3613385565b5b0492506020810190505b662386f26fc10000831061252d57662386f26fc10000838161252357612522613385565b5b0492506010810190505b6305f5e1008310612556576305f5e100838161254c5761254b613385565b5b0492506008810190505b612710831061257b57612710838161257157612570613385565b5b0492506004810190505b6064831061259e576064838161259457612593613385565b5b0492506002810190505b600a83106125ad576001810190505b80915050919050565b6040518060c001604052805f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f80191681526020015f80191681526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61264c81612618565b8114612656575f80fd5b50565b5f8135905061266781612643565b92915050565b5f6020828403121561268257612681612610565b5b5f61268f84828501612659565b91505092915050565b5f8115159050919050565b6126ac81612698565b82525050565b5f6020820190506126c55f8301846126a3565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156127025780820151818401526020810190506126e7565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612727826126cb565b61273181856126d5565b93506127418185602086016126e5565b61274a8161270d565b840191505092915050565b5f6020820190508181035f83015261276d818461271d565b905092915050565b5f819050919050565b61278781612775565b8114612791575f80fd5b50565b5f813590506127a28161277e565b92915050565b5f602082840312156127bd576127bc612610565b5b5f6127ca84828501612794565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6127fc826127d3565b9050919050565b61280c816127f2565b82525050565b5f6020820190506128255f830184612803565b92915050565b612834816127f2565b811461283e575f80fd5b50565b5f8135905061284f8161282b565b92915050565b5f806040838503121561286b5761286a612610565b5b5f61287885828601612841565b925050602061288985828601612794565b9150509250929050565b61289c81612775565b82525050565b5f6020820190506128b55f830184612893565b92915050565b6128c481612698565b82525050565b6128d3816127f2565b82525050565b5f60ff82169050919050565b6128ee816128d9565b82525050565b5f819050919050565b612906816128f4565b82525050565b61291581612775565b82525050565b60c082015f82015161292f5f8501826128bb565b50602082015161294260208501826128ca565b50604082015161295560408501826128e5565b50606082015161296860608501826128fd565b50608082015161297b60808501826128fd565b5060a082015161298e60a085018261290c565b50505050565b5f60c0820190506129a75f83018461291b565b92915050565b5f805f606084860312156129c4576129c3612610565b5b5f6129d186828701612841565b93505060206129e286828701612841565b92505060406129f386828701612794565b9150509250925092565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612a3b8261270d565b810181811067ffffffffffffffff82111715612a5a57612a59612a05565b5b80604052505050565b5f612a6c612607565b9050612a788282612a32565b919050565b5f67ffffffffffffffff821115612a9757612a96612a05565b5b612aa08261270d565b9050602081019050919050565b828183375f83830152505050565b5f612acd612ac884612a7d565b612a63565b905082815260208101848484011115612ae957612ae8612a01565b5b612af4848285612aad565b509392505050565b5f82601f830112612b1057612b0f6129fd565b5b8135612b20848260208601612abb565b91505092915050565b5f60208284031215612b3e57612b3d612610565b5b5f82013567ffffffffffffffff811115612b5b57612b5a612614565b5b612b6784828501612afc565b91505092915050565b5f60208284031215612b8557612b84612610565b5b5f612b9284828501612841565b91505092915050565b612ba481612698565b8114612bae575f80fd5b50565b5f81359050612bbf81612b9b565b92915050565b5f8060408385031215612bdb57612bda612610565b5b5f612be885828601612841565b9250506020612bf985828601612bb1565b9150509250929050565b5f67ffffffffffffffff821115612c1d57612c1c612a05565b5b612c268261270d565b9050602081019050919050565b5f612c45612c4084612c03565b612a63565b905082815260208101848484011115612c6157612c60612a01565b5b612c6c848285612aad565b509392505050565b5f82601f830112612c8857612c876129fd565b5b8135612c98848260208601612c33565b91505092915050565b5f805f8060808587031215612cb957612cb8612610565b5b5f612cc687828801612841565b9450506020612cd787828801612841565b9350506040612ce887828801612794565b925050606085013567ffffffffffffffff811115612d0957612d08612614565b5b612d1587828801612c74565b91505092959194509250565b5f805f60608486031215612d3857612d37612610565b5b5f612d4586828701612794565b9350506020612d5686828701612841565b9250506040612d6786828701612794565b9150509250925092565b612d7a816128f4565b82525050565b5f602082019050612d935f830184612d71565b92915050565b5f8060408385031215612daf57612dae612610565b5b5f612dbc85828601612841565b9250506020612dcd85828601612841565b9150509250929050565b612de0816128d9565b8114612dea575f80fd5b50565b5f81359050612dfb81612dd7565b92915050565b612e0a816128f4565b8114612e14575f80fd5b50565b5f81359050612e2581612e01565b92915050565b5f805f8060808587031215612e4357612e42612610565b5b5f612e5087828801612794565b9450506020612e6187828801612ded565b9350506040612e7287828801612e17565b9250506060612e8387828801612e17565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612ed357607f821691505b602082108103612ee657612ee5612e8f565b5b50919050565b5f606082019050612eff5f830186612803565b612f0c6020830185612893565b612f196040830184612803565b949350505050565b7f4d79546f6b656e4d696e7461626c653a2063616c6c6572206973206e6f7420745f8201527f6865206f776e6572000000000000000000000000000000000000000000000000602082015250565b5f612f7b6028836126d5565b9150612f8682612f21565b604082019050919050565b5f6020820190508181035f830152612fa881612f6f565b9050919050565b5f606082019050612fc25f830186612893565b612fcf6020830185612803565b612fdc6040830184612893565b949350505050565b7f53455442415345555249204e4f54204f574e45520000000000000000000000005f82015250565b5f6130186014836126d5565b915061302382612fe4565b602082019050919050565b5f6020820190508181035f8301526130458161300c565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026130a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261306d565b6130b2868361306d565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6130ed6130e86130e384612775565b6130ca565b612775565b9050919050565b5f819050919050565b613106836130d3565b61311a613112826130f4565b848454613079565b825550505050565b5f90565b61312e613122565b6131398184846130fd565b505050565b5b8181101561315c576131515f82613126565b60018101905061313f565b5050565b601f8211156131a1576131728161304c565b61317b8461305e565b8101602085101561318a578190505b61319e6131968561305e565b83018261313e565b50505b505050565b5f82821c905092915050565b5f6131c15f19846008026131a6565b1980831691505092915050565b5f6131d983836131b2565b9150826002028217905092915050565b6131f2826126cb565b67ffffffffffffffff81111561320b5761320a612a05565b5b6132158254612ebc565b613220828285613160565b5f60209050601f831160018114613251575f841561323f578287015190505b61324985826131ce565b8655506132b0565b601f19841661325f8661304c565b5f5b8281101561328657848901518255600182019150602085019450602081019050613261565b868310156132a3578489015161329f601f8916826131b2565b8355505b6001600288020188555050505b505050505050565b7f4d79546f6b656e4d696e7461626c653a206d617820737570706c7920726561635f8201527f6865640000000000000000000000000000000000000000000000000000000000602082015250565b5f6133126023836126d5565b915061331d826132b8565b604082019050919050565b5f6020820190508181035f83015261333f81613306565b9050919050565b5f815190506133548161277e565b92915050565b5f6020828403121561336f5761336e612610565b5b5f61337c84828501613346565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6133bc82612775565b91506133c783612775565b9250826133d7576133d6613385565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61341982612775565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361344b5761344a6133e2565b5b600182019050919050565b5f81905092915050565b5f61346a826126cb565b6134748185613456565b93506134848185602086016126e5565b80840191505092915050565b5f61349b8285613460565b91506134a78284613460565b91508190509392505050565b5f815190506134c181612e01565b92915050565b5f602082840312156134dc576134db612610565b5b5f6134e9848285016134b3565b91505092915050565b7f4d79546f6b656e4d696e7461626c653a20746f6b656e206973206e6f742070725f8201527f652d6275726e6564000000000000000000000000000000000000000000000000602082015250565b5f61354c6028836126d5565b9150613557826134f2565b604082019050919050565b5f6020820190508181035f83015261357981613540565b9050919050565b613589816128d9565b82525050565b5f6080820190506135a25f830187612d71565b6135af6020830186613580565b6135bc6040830185612d71565b6135c96060830184612d71565b95945050505050565b5f815190506135e08161282b565b92915050565b5f602082840312156135fb576135fa612610565b5b5f613608848285016135d2565b91505092915050565b7f4d79546f6b656e204d696e7461626c653a20696e76616c6964207369676e61745f8201527f7572650000000000000000000000000000000000000000000000000000000000602082015250565b5f61366b6023836126d5565b915061367682613611565b604082019050919050565b5f6020820190508181035f8301526136988161365f565b9050919050565b7f496e76616c696420746f6b656e207261726974790000000000000000000000005f82015250565b5f6136d36014836126d5565b91506136de8261369f565b602082019050919050565b5f6020820190508181035f830152613700816136c7565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f61372b82613707565b6137358185613711565b93506137458185602086016126e5565b61374e8161270d565b840191505092915050565b5f60808201905061376c5f830187612803565b6137796020830186612803565b6137866040830185612893565b81810360608301526137988184613721565b905095945050505050565b5f815190506137b181612643565b92915050565b5f602082840312156137cc576137cb612610565b5b5f6137d9848285016137a3565b91505092915050565b5f6040820190506137f55f830185612803565b6138026020830184612893565b939250505056fea2646970667358221220de68334b89ac191602f54bd50dd87365c9af6c25bb4e6b1e674d2e527a37c20f64736f6c634300081800330000000000000000000000000000000000000000000000000000000000002710000000000000000000000000c4e38adad3caa46471428ecb479d87d95ab6eb5e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000011687474703a2f2f6c6f63616c686f73742f000000000000000000000000000000");
      // const TestAccount& from, const Address& to, const uint256_t& value, Bytes data = Bytes()
      auto createTx = sdk.createNewTx(sdk.getChainOwnerAccount(), Address(), 0, erc721CreateBytes);
      sdk.advanceChain(0, {createTx});
      REQUIRE(sdk.getEvmContracts().size() == 1);
      REQUIRE(sdk.getEvmContractAddress(createTx.hash()) != Address());
      auto createTxHash = createTx.hash();
      auto contractAddress = sdk.getEvmContractAddress(createTxHash);
      REQUIRE(sdk.isEvmContract(contractAddress));
      auto ERC721MintAddress = contractAddress;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "MyTokenMintable");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "MTM");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 0);
      std::string tokenURI = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::tokenURI, uint256_t(0));
      REQUIRE(events.size() == 0);
      REQUIRE(tokenURI == "http://localhost/bronze");
      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      std::cout << "Preburn hash: " << message.hex() << std::endl;
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address, uint256_t>(events[0].getData());
      const auto& [tokenIdBurn, userBurn, tokenRarity ] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn, tokenRarity));
      std::cout << "message: " << Hex::fromBytes(createMessage(tokenIdBurn, userBurn, tokenRarity)) << std::endl;
      std::cout << "preMessageHash: " << hash.hex() << std::endl;
      auto messageHash = _toTyped32ByteDataHash(hash);
      std::cout << "messageHash: " << messageHash.hex() << std::endl;

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;

      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      std::cout << "SENDING BURN ON EVMM: " << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      std::cout << "burned: " << std::endl;

      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS, rarity] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));
      std::cout << "Rarity: " << rarity << std::endl;

    }
  }
}