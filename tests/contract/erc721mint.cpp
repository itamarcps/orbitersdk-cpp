/*
  Copyright (c) [2023-2024] [Sparq Network]
  This software is distributed under the MIT License.
  See the LICENSE.txt file in the project root for more information.
*/

#include "../../src/libs/catch2/catch_amalgamated.hpp"
#include "../../src/contract/templates/erc721mint.h"
#include "../../src/contract/abi.h"
#include "../../src/utils/db.h"
#include "../../src/utils/options.h"
#include "../../src/contract/contractmanager.h"
#include "../../src/core/rdpos.h"
#include "../sdktestsuite.hpp"

Bytes createMessage (const uint256_t& tokenId, const Address& user, uint256_t rarity) {
  Bytes value;
  value.reserve(52); // 32 bytes for tokenId and 20 bytes for user
  Utils::appendBytes(value, Utils::uint256ToBytes(tokenId));
  Utils::appendBytes(value, user.asBytes());
  Utils::appendBytes(value, Utils::uint256ToBytes(rarity));
  return value;
}

Hash _toTyped32ByteDataHash (const Hash& messageHash) {
  Bytes value;
  value.insert(value.end(), 0x19);
  std::string ethereumSignedMessage = "Ethereum Signed Message:";
  Utils::appendBytes(value, ethereumSignedMessage);
  value.insert(value.end(), '\n');
  Utils::appendBytes(value, std::to_string(32));
  Utils::appendBytes(value, messageHash);
  std::cout << "_toTyped32ByteDataHash: " << Hex::fromBytes(value) << std::endl;
  return Utils::sha3(value);
}


namespace TERC721 {
  TEST_CASE("ERC721Mint Class", "[contract][erc721mint]") {

    PrivKey signerKey(Hex::toBytes("0x1b2151ea1c4c24ee3c61ab5d37e383caf1b81a9ce895de9aba9119eb0233123d"));
    Address signerAddress(Secp256k1::toAddress(Secp256k1::toUPub(signerKey)));

    SECTION("ERC721Mint Creation, PreBurn, Burn") {
      std::cout << "Signed Address: " << signerAddress.hex(true) << std::endl;
      std::cout << "Signer Privkey: " << signerKey.hex() << std::endl;
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreation");
      auto ERC721MintAddress = sdk.deployContract<ERC721Mint>(std::string("My Test NFT!"), std::string("NFT"), uint256_t(10000), signerAddress, std::string("http://localhost/"));
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "My Test NFT!");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "NFT");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      std::string tokenURI = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::tokenURI, uint256_t(0));
      REQUIRE(events.size() == 0);
      REQUIRE(tokenURI == "http://localhost/bronze");

      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address, uint256_t>(events[0].getData());
      const auto& [tokenIdBurn, userBurn, userRarity] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn, userRarity));
      auto messageHash = _toTyped32ByteDataHash(hash);

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;
      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS, rarity] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));
      std::cout << "Rarity: " << rarity << std::endl;
    }

    SECTION("ERC721Mint Creation, PreBurn, Burn EVM") {
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreationEVM");
      const auto erc721CreateBytes = Hex::toBytes("0x60c060405234801562000010575f80fd5b5060405162003ef138038062003ef183398181016040528101906200003691906200038a565b6040518060400160405280600f81526020017f4d79546f6b656e4d696e7461626c6500000000000000000000000000000000008152506040518060400160405280600381526020017f4d544d0000000000000000000000000000000000000000000000000000000000815250815f9081620000b2919062000630565b508060019081620000c4919062000630565b5050503360095f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806006908162000118919062000630565b505f6007819055505f60088190555082608081815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000714565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b62000191816200017d565b81146200019c575f80fd5b50565b5f81519050620001af8162000186565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001e082620001b5565b9050919050565b620001f281620001d4565b8114620001fd575f80fd5b50565b5f815190506200021081620001e7565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b62000266826200021e565b810181811067ffffffffffffffff821117156200028857620002876200022e565b5b80604052505050565b5f6200029c6200016c565b9050620002aa82826200025b565b919050565b5f67ffffffffffffffff821115620002cc57620002cb6200022e565b5b620002d7826200021e565b9050602081019050919050565b5f5b8381101562000303578082015181840152602081019050620002e6565b5f8484015250505050565b5f620003246200031e84620002af565b62000291565b9050828152602081018484840111156200034357620003426200021a565b5b62000350848285620002e4565b509392505050565b5f82601f8301126200036f576200036e62000216565b5b8151620003818482602086016200030e565b91505092915050565b5f805f60608486031215620003a457620003a362000175565b5b5f620003b3868287016200019f565b9350506020620003c68682870162000200565b925050604084015167ffffffffffffffff811115620003ea57620003e962000179565b5b620003f88682870162000358565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200045157607f821691505b6020821081036200046757620004666200040c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200048e565b620004d786836200048e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f62000518620005126200050c846200017d565b620004ef565b6200017d565b9050919050565b5f819050919050565b6200053383620004f8565b6200054b62000542826200051f565b8484546200049a565b825550505050565b5f90565b6200056162000553565b6200056e81848462000528565b505050565b5b818110156200059557620005895f8262000557565b60018101905062000574565b5050565b601f821115620005e457620005ae816200046d565b620005b9846200047f565b81016020851015620005c9578190505b620005e1620005d8856200047f565b83018262000573565b50505b505050565b5f82821c905092915050565b5f620006065f1984600802620005e9565b1980831691505092915050565b5f620006208383620005f5565b9150826002028217905092915050565b6200063b8262000402565b67ffffffffffffffff8111156200065757620006566200022e565b5b62000663825462000439565b6200067082828562000599565b5f60209050601f831160018114620006a6575f841562000691578287015190505b6200069d858262000613565b8655506200070c565b601f198416620006b6866200046d565b5f5b82811015620006df57848901518255600182019150602085019450602081019050620006b8565b86831015620006ff5784890151620006fb601f891682620005f5565b8355505b6001600288020188555050505b505050505050565b60805160a0516137ad620007445f395f818161073a01526111db01525f8181610bfa015261102a01526137ad5ff3fe608060405234801561000f575f80fd5b5060043610610156575f3560e01c80636352211e116100c1578063a22cb4651161007a578063a22cb465146103e8578063b88d4fde14610404578063c87b56dd14610420578063d5abeb0114610450578063e985e9c51461046e578063fcc82dc21461049e57610156565b80636352211e146103005780636a6278421461033057806370a082311461034c5780637240d90b1461037c57806395d89b41146103ac57806398bdf6f5146103ca57610156565b8063238ac93311610113578063238ac9331461024257806323b872dd14610260578063343333621461027c57806342842e0e1461029857806355f804b3146102b457806362b6b5bf146102d057610156565b806301ffc9a71461015a57806306fdde031461018a578063081812fc146101a8578063095ea7b3146101d857806318160ddd146101f45780631c348dd314610212575b5f80fd5b610174600480360381019061016f9190612515565b6104ba565b604051610181919061255a565b60405180910390f35b61019261059b565b60405161019f91906125fd565b60405180910390f35b6101c260048036038101906101bd9190612650565b61062a565b6040516101cf91906126ba565b60405180910390f35b6101f260048036038101906101ed91906126fd565b610645565b005b6101fc61065b565b604051610209919061274a565b60405180910390f35b61022c60048036038101906102279190612650565b610664565b604051610239919061283c565b60405180910390f35b61024a610737565b60405161025791906126ba565b60405180910390f35b61027a60048036038101906102759190612855565b61075e565b005b61029660048036038101906102919190612650565b61085d565b005b6102b260048036038101906102ad9190612855565b610a53565b005b6102ce60048036038101906102c991906129d1565b610a72565b005b6102ea60048036038101906102e59190612650565b610b14565b6040516102f7919061283c565b60405180910390f35b61031a60048036038101906103159190612650565b610be7565b60405161032791906126ba565b60405180910390f35b61034a60048036038101906103459190612a18565b610bf8565b005b61036660048036038101906103619190612a18565b610d5b565b604051610373919061274a565b60405180910390f35b61039660048036038101906103919190612a43565b610e11565b6040516103a39190612ad3565b60405180910390f35b6103b4610e50565b6040516103c191906125fd565b60405180910390f35b6103d2610ee0565b6040516103df919061274a565b60405180910390f35b61040260048036038101906103fd9190612b1d565b610ee9565b005b61041e60048036038101906104199190612bf9565b610eff565b005b61043a60048036038101906104359190612650565b610f1c565b60405161044791906125fd565b60405180910390f35b610458611027565b604051610465919061274a565b60405180910390f35b61048860048036038101906104839190612c79565b61104e565b604051610495919061255a565b60405180910390f35b6104b860048036038101906104b39190612d0b565b6110dc565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061058457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610594575061059382611425565b5b9050919050565b60605f80546105a990612d9c565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590612d9c565b80156106205780601f106105f757610100808354040283529160200191610620565b820191905f5260205f20905b81548152906001019060200180831161060357829003601f168201915b5050505050905090565b5f6106348261148e565b5061063e82611514565b9050919050565b610657828261065261154d565b611554565b5050565b5f600854905090565b61066c61245e565b600b5f8381526020019081526020015f206040518060c00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff16815260200160018201548152602001600282015481526020016003820154815250509050919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107ce575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016107c591906126ba565b60405180910390fd5b5f6107e183836107dc61154d565b611566565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610857578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161084e93929190612dcc565b60405180910390fd5b50505050565b61086681610be7565b73ffffffffffffffffffffffffffffffffffffffff1661088461154d565b73ffffffffffffffffffffffffffffffffffffffff16146108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190612e71565b60405180910390fd5b6108e381611771565b6040518060c001604052806001151581526020016108ff61154d565b73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f801b81526020015f801b8152602001600c5f8481526020019081526020015f2054815250600a5f8381526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff160217905550606082015181600101556080820151816002015560a082015181600301559050507f9d3bd8ca6857d62b093fc756ed48d15bcccbe17031d64613798b025d9242623a81610a2761154d565b600c5f8581526020019081526020015f2054604051610a4893929190612e8f565b60405180910390a150565b610a6d83838360405180602001604052805f815250610eff565b505050565b3373ffffffffffffffffffffffffffffffffffffffff1660095f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af890612f0e565b60405180910390fd5b8060069081610b1091906130c9565b5050565b610b1c61245e565b600a5f8381526020019081526020015f206040518060c00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff16815260200160018201548152602001600282015481526020016003820154815250509050919050565b5f610bf18261148e565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000060075410610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5390613208565b60405180910390fd5b610c68816007546117f3565b5f612710600143610c799190613253565b40600754604051602001610c8e9291906132c6565b604051602081830303815290604052805190602001205f1c610cb0919061331e565b90505f80606483610cc1919061331e565b03610ccf5760019050610ce9565b5f6103e883610cde919061331e565b03610ce857600290505b5b80600c5f60075481526020019081526020015f2081905550610d28600754610d23600c5f60075481526020019081526020015f2054611810565b611920565b60075f815480929190610d3a9061334e565b919050555060085f815480929190610d519061334e565b9190505550505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dcc575f6040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610dc391906126ba565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60608282600c5f8681526020019081526020015f2054604051602001610e39939291906133da565b604051602081830303815290604052905092915050565b606060018054610e5f90612d9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8b90612d9c565b8015610ed65780601f10610ead57610100808354040283529160200191610ed6565b820191905f5260205f20905b815481529060010190602001808311610eb957829003601f168201915b5050505050905090565b5f600754905090565b610efb610ef461154d565b838361197a565b5050565b610f0a84848461075e565b610f1684848484611ae3565b50505050565b6060610f278261148e565b505f600d5f8481526020019081526020015f208054610f4590612d9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7190612d9c565b8015610fbc5780601f10610f9357610100808354040283529160200191610fbc565b820191905f5260205f20905b815481529060010190602001808311610f9f57829003601f168201915b505050505090505f610fcc611c95565b90505f815103610fe0578192505050611022565b5f82511115611014578082604051602001610ffc929190613450565b60405160208183030381529060405292505050611022565b61101d84611d25565b925050505b919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b600a5f8581526020019081526020015f205f015f9054906101000a900460ff1661113b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611132906134e3565b60405180910390fd5b5f61117985600a5f8881526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610e11565b8051906020012090505f600161118e83611d8b565b8686866040515f81526020016040526040516111ad949392919061351f565b6020604051602081039080840390855afa1580156111cd573d5f803e3d5ffd5b5050506020604051035190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e906135d2565b60405180910390fd5b6040518060c00160405280600115158152602001600a5f8981526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018660ff168152602001858152602001848152602001600c5f8981526020019081526020015f2054815250600b5f8881526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff160217905550606082015181600101556080820151816002015560a08201518160030155905050600a5f8781526020019081526020015f205f8082015f6101000a81549060ff02191690555f820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555f820160156101000a81549060ff0219169055600182015f9055600282015f9055600382015f90555050505050505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8061149983611dba565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361150b57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611502919061274a565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b6115618383836001611df3565b505050565b5f8061157184611dba565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146115b2576115b1818486611fb2565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461163d576115f15f855f80611df3565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146116bc57600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f61177d5f835f611566565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117ef57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016117e6919061274a565b60405180910390fd5b5050565b61180c828260405180602001604052805f815250612075565b5050565b60605f8203611856576040518060400160405280600681526020017f62726f6e7a650000000000000000000000000000000000000000000000000000815250905061191b565b6001820361189b576040518060400160405280600681526020017f73696c7665720000000000000000000000000000000000000000000000000000815250905061191b565b600282036118e0576040518060400160405280600481526020017f676f6c6400000000000000000000000000000000000000000000000000000000815250905061191b565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119129061363a565b60405180910390fd5b919050565b80600d5f8481526020019081526020015f20908161193e91906130c9565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161196e919061274a565b60405180910390a15050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119ea57816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016119e191906126ba565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ad6919061255a565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b1115611c8f578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b2661154d565b8685856040518563ffffffff1660e01b8152600401611b489493929190613658565b6020604051808303815f875af1925050508015611b8357506040513d601f19601f82011682018060405250810190611b8091906136b6565b60015b611c04573d805f8114611bb1576040519150601f19603f3d011682016040523d82523d5f602084013e611bb6565b606091505b505f815103611bfc57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611bf391906126ba565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611c8d57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c8491906126ba565b60405180910390fd5b505b50505050565b606060068054611ca490612d9c565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd090612d9c565b8015611d1b5780601f10611cf257610100808354040283529160200191611d1b565b820191905f5260205f20905b815481529060010190602001808311611cfe57829003601f168201915b5050505050905090565b6060611d308261148e565b505f611d3a611c95565b90505f815111611d585760405180602001604052805f815250611d83565b80611d6284612090565b604051602001611d73929190613450565b6040516020818303038152906040525b915050919050565b5f81604051602001611d9d919061372b565b604051602081830303815290604052805190602001209050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611e2b57505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611f5d575f611e3a8461148e565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611ea457508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611eb75750611eb5818461104e565b155b15611ef957826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611ef091906126ba565b60405180910390fd5b8115611f5b57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611fbd83838361215a565b612070575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361203157806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612028919061274a565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612067929190613750565b60405180910390fd5b505050565b61207f838361221a565b61208b5f848484611ae3565b505050565b60605f600161209e8461230d565b0190505f8167ffffffffffffffff8111156120bc576120bb6128ad565b5b6040519080825280601f01601f1916602001820160405280156120ee5781602001600182028036833780820191505090505b5090505f82602001820190505b60011561214f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612144576121436132f1565b5b0494505f85036120fb575b819350505050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561221157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806121d257506121d1848461104e565b5b8061221057508273ffffffffffffffffffffffffffffffffffffffff166121f883611514565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361228a575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161228191906126ba565b60405180910390fd5b5f61229683835f611566565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612308575f6040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016122ff91906126ba565b60405180910390fd5b505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612369577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161235f5761235e6132f1565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106123a6576d04ee2d6d415b85acef8100000000838161239c5761239b6132f1565b5b0492506020810190505b662386f26fc1000083106123d557662386f26fc1000083816123cb576123ca6132f1565b5b0492506010810190505b6305f5e10083106123fe576305f5e10083816123f4576123f36132f1565b5b0492506008810190505b6127108310612423576127108381612419576124186132f1565b5b0492506004810190505b60648310612446576064838161243c5761243b6132f1565b5b0492506002810190505b600a8310612455576001810190505b80915050919050565b6040518060c001604052805f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f80191681526020015f80191681526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6124f4816124c0565b81146124fe575f80fd5b50565b5f8135905061250f816124eb565b92915050565b5f6020828403121561252a576125296124b8565b5b5f61253784828501612501565b91505092915050565b5f8115159050919050565b61255481612540565b82525050565b5f60208201905061256d5f83018461254b565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156125aa57808201518184015260208101905061258f565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6125cf82612573565b6125d9818561257d565b93506125e981856020860161258d565b6125f2816125b5565b840191505092915050565b5f6020820190508181035f83015261261581846125c5565b905092915050565b5f819050919050565b61262f8161261d565b8114612639575f80fd5b50565b5f8135905061264a81612626565b92915050565b5f60208284031215612665576126646124b8565b5b5f6126728482850161263c565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6126a48261267b565b9050919050565b6126b48161269a565b82525050565b5f6020820190506126cd5f8301846126ab565b92915050565b6126dc8161269a565b81146126e6575f80fd5b50565b5f813590506126f7816126d3565b92915050565b5f8060408385031215612713576127126124b8565b5b5f612720858286016126e9565b92505060206127318582860161263c565b9150509250929050565b6127448161261d565b82525050565b5f60208201905061275d5f83018461273b565b92915050565b61276c81612540565b82525050565b61277b8161269a565b82525050565b5f60ff82169050919050565b61279681612781565b82525050565b5f819050919050565b6127ae8161279c565b82525050565b6127bd8161261d565b82525050565b60c082015f8201516127d75f850182612763565b5060208201516127ea6020850182612772565b5060408201516127fd604085018261278d565b50606082015161281060608501826127a5565b50608082015161282360808501826127a5565b5060a082015161283660a08501826127b4565b50505050565b5f60c08201905061284f5f8301846127c3565b92915050565b5f805f6060848603121561286c5761286b6124b8565b5b5f612879868287016126e9565b935050602061288a868287016126e9565b925050604061289b8682870161263c565b9150509250925092565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6128e3826125b5565b810181811067ffffffffffffffff82111715612902576129016128ad565b5b80604052505050565b5f6129146124af565b905061292082826128da565b919050565b5f67ffffffffffffffff82111561293f5761293e6128ad565b5b612948826125b5565b9050602081019050919050565b828183375f83830152505050565b5f61297561297084612925565b61290b565b905082815260208101848484011115612991576129906128a9565b5b61299c848285612955565b509392505050565b5f82601f8301126129b8576129b76128a5565b5b81356129c8848260208601612963565b91505092915050565b5f602082840312156129e6576129e56124b8565b5b5f82013567ffffffffffffffff811115612a0357612a026124bc565b5b612a0f848285016129a4565b91505092915050565b5f60208284031215612a2d57612a2c6124b8565b5b5f612a3a848285016126e9565b91505092915050565b5f8060408385031215612a5957612a586124b8565b5b5f612a668582860161263c565b9250506020612a77858286016126e9565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f612aa582612a81565b612aaf8185612a8b565b9350612abf81856020860161258d565b612ac8816125b5565b840191505092915050565b5f6020820190508181035f830152612aeb8184612a9b565b905092915050565b612afc81612540565b8114612b06575f80fd5b50565b5f81359050612b1781612af3565b92915050565b5f8060408385031215612b3357612b326124b8565b5b5f612b40858286016126e9565b9250506020612b5185828601612b09565b9150509250929050565b5f67ffffffffffffffff821115612b7557612b746128ad565b5b612b7e826125b5565b9050602081019050919050565b5f612b9d612b9884612b5b565b61290b565b905082815260208101848484011115612bb957612bb86128a9565b5b612bc4848285612955565b509392505050565b5f82601f830112612be057612bdf6128a5565b5b8135612bf0848260208601612b8b565b91505092915050565b5f805f8060808587031215612c1157612c106124b8565b5b5f612c1e878288016126e9565b9450506020612c2f878288016126e9565b9350506040612c408782880161263c565b925050606085013567ffffffffffffffff811115612c6157612c606124bc565b5b612c6d87828801612bcc565b91505092959194509250565b5f8060408385031215612c8f57612c8e6124b8565b5b5f612c9c858286016126e9565b9250506020612cad858286016126e9565b9150509250929050565b612cc081612781565b8114612cca575f80fd5b50565b5f81359050612cdb81612cb7565b92915050565b612cea8161279c565b8114612cf4575f80fd5b50565b5f81359050612d0581612ce1565b92915050565b5f805f8060808587031215612d2357612d226124b8565b5b5f612d308782880161263c565b9450506020612d4187828801612ccd565b9350506040612d5287828801612cf7565b9250506060612d6387828801612cf7565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612db357607f821691505b602082108103612dc657612dc5612d6f565b5b50919050565b5f606082019050612ddf5f8301866126ab565b612dec602083018561273b565b612df960408301846126ab565b949350505050565b7f4d79546f6b656e4d696e7461626c653a2063616c6c6572206973206e6f7420745f8201527f6865206f776e6572000000000000000000000000000000000000000000000000602082015250565b5f612e5b60288361257d565b9150612e6682612e01565b604082019050919050565b5f6020820190508181035f830152612e8881612e4f565b9050919050565b5f606082019050612ea25f83018661273b565b612eaf60208301856126ab565b612ebc604083018461273b565b949350505050565b7f53455442415345555249204e4f54204f574e45520000000000000000000000005f82015250565b5f612ef860148361257d565b9150612f0382612ec4565b602082019050919050565b5f6020820190508181035f830152612f2581612eec565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612f887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f4d565b612f928683612f4d565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612fcd612fc8612fc38461261d565b612faa565b61261d565b9050919050565b5f819050919050565b612fe683612fb3565b612ffa612ff282612fd4565b848454612f59565b825550505050565b5f90565b61300e613002565b613019818484612fdd565b505050565b5b8181101561303c576130315f82613006565b60018101905061301f565b5050565b601f8211156130815761305281612f2c565b61305b84612f3e565b8101602085101561306a578190505b61307e61307685612f3e565b83018261301e565b50505b505050565b5f82821c905092915050565b5f6130a15f1984600802613086565b1980831691505092915050565b5f6130b98383613092565b9150826002028217905092915050565b6130d282612573565b67ffffffffffffffff8111156130eb576130ea6128ad565b5b6130f58254612d9c565b613100828285613040565b5f60209050601f831160018114613131575f841561311f578287015190505b61312985826130ae565b865550613190565b601f19841661313f86612f2c565b5f5b8281101561316657848901518255600182019150602085019450602081019050613141565b86831015613183578489015161317f601f891682613092565b8355505b6001600288020188555050505b505050505050565b7f4d79546f6b656e4d696e7461626c653a206d617820737570706c7920726561635f8201527f6865640000000000000000000000000000000000000000000000000000000000602082015250565b5f6131f260238361257d565b91506131fd82613198565b604082019050919050565b5f6020820190508181035f83015261321f816131e6565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61325d8261261d565b91506132688361261d565b92508282039050818111156132805761327f613226565b5b92915050565b5f819050919050565b6132a061329b8261279c565b613286565b82525050565b5f819050919050565b6132c06132bb8261261d565b6132a6565b82525050565b5f6132d1828561328f565b6020820191506132e182846132af565b6020820191508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6133288261261d565b91506133338361261d565b925082613343576133426132f1565b5b828206905092915050565b5f6133588261261d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361338a57613389613226565b5b600182019050919050565b5f8160601b9050919050565b5f6133ab82613395565b9050919050565b5f6133bc826133a1565b9050919050565b6133d46133cf8261269a565b6133b2565b82525050565b5f6133e582866132af565b6020820191506133f582856133c3565b60148201915061340582846132af565b602082019150819050949350505050565b5f81905092915050565b5f61342a82612573565b6134348185613416565b935061344481856020860161258d565b80840191505092915050565b5f61345b8285613420565b91506134678284613420565b91508190509392505050565b7f4d79546f6b656e4d696e7461626c653a20746f6b656e206973206e6f742070725f8201527f652d6275726e6564000000000000000000000000000000000000000000000000602082015250565b5f6134cd60288361257d565b91506134d882613473565b604082019050919050565b5f6020820190508181035f8301526134fa816134c1565b9050919050565b61350a8161279c565b82525050565b61351981612781565b82525050565b5f6080820190506135325f830187613501565b61353f6020830186613510565b61354c6040830185613501565b6135596060830184613501565b95945050505050565b7f4d79546f6b656e204d696e7461626c653a20696e76616c6964207369676e61745f8201527f7572650000000000000000000000000000000000000000000000000000000000602082015250565b5f6135bc60238361257d565b91506135c782613562565b604082019050919050565b5f6020820190508181035f8301526135e9816135b0565b9050919050565b7f496e76616c696420746f6b656e207261726974790000000000000000000000005f82015250565b5f61362460148361257d565b915061362f826135f0565b602082019050919050565b5f6020820190508181035f83015261365181613618565b9050919050565b5f60808201905061366b5f8301876126ab565b61367860208301866126ab565b613685604083018561273b565b81810360608301526136978184612a9b565b905095945050505050565b5f815190506136b0816124eb565b92915050565b5f602082840312156136cb576136ca6124b8565b5b5f6136d8848285016136a2565b91505092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f82015250565b5f613715601c83613416565b9150613720826136e1565b601c82019050919050565b5f61373582613709565b9150613741828461328f565b60208201915081905092915050565b5f6040820190506137635f8301856126ab565b613770602083018461273b565b939250505056fea26469706673582212200a84b2fbc6c5edd2f019a7cc49b55e85ce111ac2aaa6785c3e6b27cf2e5568a764736f6c634300081800330000000000000000000000000000000000000000000000000000000000002710000000000000000000000000c4e38adad3caa46471428ecb479d87d95ab6eb5e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000011687474703a2f2f6c6f63616c686f73742f000000000000000000000000000000");
      // const TestAccount& from, const Address& to, const uint256_t& value, Bytes data = Bytes()
      auto createTx = sdk.createNewTx(sdk.getChainOwnerAccount(), Address(), 0, erc721CreateBytes);
      sdk.advanceChain(0, {createTx});
      REQUIRE(sdk.getEvmContracts().size() == 1);
      REQUIRE(sdk.getEvmContractAddress(createTx.hash()) != Address());
      auto createTxHash = createTx.hash();
      auto contractAddress = sdk.getEvmContractAddress(createTxHash);
      REQUIRE(sdk.isEvmContract(contractAddress));
      auto ERC721MintAddress = contractAddress;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "MyTokenMintable");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "MTM");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 0);
      std::string tokenURI = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::tokenURI, uint256_t(0));
      std::string baseURI = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::_baseURI);
      std::cout << "BaseURI: " << baseURI << std::endl;
      REQUIRE(events.size() == 0);
      REQUIRE(tokenURI == "http://localhost/bronze");
      REQUIRE(baseURI == "http://localhost/");
      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      std::cout << "Preburn hash: " << message.hex() << std::endl;
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address, uint256_t>(events[0].getData());
      const auto& [tokenIdBurn, userBurn, tokenRarity ] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn, tokenRarity));
      std::cout << "message: " << Hex::fromBytes(createMessage(tokenIdBurn, userBurn, tokenRarity)) << std::endl;
      std::cout << "preMessageHash: " << hash.hex() << std::endl;
      auto messageHash = _toTyped32ByteDataHash(hash);
      std::cout << "messageHash: " << messageHash.hex() << std::endl;

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;

      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      std::cout << "SENDING BURN ON EVMM: " << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      std::cout << "burned: " << std::endl;

      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS, rarity] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));
      std::cout << "Rarity: " << rarity << std::endl;

    }
  }
}