/*
  Copyright (c) [2023-2024] [Sparq Network]
  This software is distributed under the MIT License.
  See the LICENSE.txt file in the project root for more information.
*/

#include "../../src/libs/catch2/catch_amalgamated.hpp"
#include "../../src/contract/templates/erc721mint.h"
#include "../../src/contract/abi.h"
#include "../../src/utils/db.h"
#include "../../src/utils/options.h"
#include "../../src/contract/contractmanager.h"
#include "../../src/core/rdpos.h"
#include "../sdktestsuite.hpp"

Bytes createMessage (const uint256_t& tokenId, const Address& user) {
  Bytes value;
  value.reserve(52); // 32 bytes for tokenId and 20 bytes for user
  Utils::appendBytes(value, Utils::uint256ToBytes(tokenId));
  Utils::appendBytes(value, user.asBytes());
  return value;
}

Hash _toTyped32ByteDataHash (const Hash& messageHash) {
  Bytes value;
  value.insert(value.end(), 0x19);
  std::string ethereumSignedMessage = "Ethereum Signed Message:";
  Utils::appendBytes(value, ethereumSignedMessage);
  value.insert(value.end(), '\n');
  Utils::appendBytes(value, std::to_string(32));
  Utils::appendBytes(value, messageHash);
  std::cout << "_toTyped32ByteDataHash: " << Hex::fromBytes(value) << std::endl;
  return Utils::sha3(value);
}


namespace TERC721 {
  TEST_CASE("ERC721Mint Class", "[contract][erc721mint]") {

    PrivKey signerKey(Hex::toBytes("0x1b2151ea1c4c24ee3c61ab5d37e383caf1b81a9ce895de9aba9119eb0233123d"));
    Address signerAddress(Secp256k1::toAddress(Secp256k1::toUPub(signerKey)));

    SECTION("ERC721Mint Creation, PreBurn, Burn") {
      std::cout << "Signed Address: " << signerAddress.hex(true) << std::endl;
      std::cout << "Signer Privkey: " << signerKey.hex() << std::endl;
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreation");
      auto ERC721MintAddress = sdk.deployContract<ERC721Mint>(std::string("My Test NFT!"), std::string("NFT"), uint256_t(10000), signerAddress);
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "My Test NFT!");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "NFT");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 0);
      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address>(events[0].getData());
      const auto& [tokenIdBurn, userBurn] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn));
      auto messageHash = _toTyped32ByteDataHash(hash);

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;
      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));
    }

    SECTION("ERC721Mint Creation, PreBurn, Burn EVM") {
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreationEVM");
      const auto erc721CreateBytes = Hex::toBytes("0x60c060405234801562000010575f80fd5b5060405162003366380380620033668339818101604052810190620000369190620001b6565b6040518060400160405280600f81526020017f4d79546f6b656e4d696e7461626c6500000000000000000000000000000000008152506040518060400160405280600381526020017f4d544d0000000000000000000000000000000000000000000000000000000000815250815f9081620000b2919062000456565b508060019081620000c4919062000456565b5050505f6006819055505f60078190555081608081815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506200053a565b5f80fd5b5f819050919050565b62000131816200011d565b81146200013c575f80fd5b50565b5f815190506200014f8162000126565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001808262000155565b9050919050565b620001928162000174565b81146200019d575f80fd5b50565b5f81519050620001b08162000187565b92915050565b5f8060408385031215620001cf57620001ce62000119565b5b5f620001de858286016200013f565b9250506020620001f185828601620001a0565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200027757607f821691505b6020821081036200028d576200028c62000232565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620002f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002b4565b620002fd8683620002b4565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6200033e6200033862000332846200011d565b62000315565b6200011d565b9050919050565b5f819050919050565b62000359836200031e565b62000371620003688262000345565b848454620002c0565b825550505050565b5f90565b6200038762000379565b620003948184846200034e565b505050565b5b81811015620003bb57620003af5f826200037d565b6001810190506200039a565b5050565b601f8211156200040a57620003d48162000293565b620003df84620002a5565b81016020851015620003ef578190505b62000407620003fe85620002a5565b83018262000399565b50505b505050565b5f82821c905092915050565b5f6200042c5f19846008026200040f565b1980831691505092915050565b5f6200044683836200041b565b9150826002028217905092915050565b6200046182620001fb565b67ffffffffffffffff8111156200047d576200047c62000205565b5b6200048982546200025f565b62000496828285620003bf565b5f60209050601f831160018114620004cc575f8415620004b7578287015190505b620004c3858262000439565b86555062000532565b601f198416620004dc8662000293565b5f5b828110156200050557848901518255600182019150602085019450602081019050620004de565b8683101562000525578489015162000521601f8916826200041b565b8355505b6001600288020188555050505b505050505050565b60805160a051612dfc6200056a5f395f81816107090152610fe201525f8181610ae90152610dfc0152612dfc5ff3fe608060405234801561000f575f80fd5b506004361061014b575f3560e01c80636352211e116100c1578063a22cb4651161007a578063a22cb465146103c1578063b88d4fde146103dd578063c87b56dd146103f9578063d5abeb0114610429578063e985e9c514610447578063fcc82dc2146104775761014b565b80636352211e146102d95780636a6278421461030957806370a08231146103255780637240d90b1461035557806395d89b411461038557806398bdf6f5146103a35761014b565b80631c348dd3116101135780631c348dd314610207578063238ac9331461023757806323b872dd14610255578063343333621461027157806342842e0e1461028d57806362b6b5bf146102a95761014b565b806301ffc9a71461014f57806306fdde031461017f578063081812fc1461019d578063095ea7b3146101cd57806318160ddd146101e9575b5f80fd5b610169600480360381019061016491906120fc565b610493565b6040516101769190612141565b60405180910390f35b610187610574565b60405161019491906121e4565b60405180910390f35b6101b760048036038101906101b29190612237565b610603565b6040516101c491906122a1565b60405180910390f35b6101e760048036038101906101e291906122e4565b61061e565b005b6101f1610634565b6040516101fe9190612331565b60405180910390f35b610221600480360381019061021c9190612237565b61063d565b60405161022e9190612401565b60405180910390f35b61023f610706565b60405161024c91906122a1565b60405180910390f35b61026f600480360381019061026a919061241a565b61072d565b005b61028b60048036038101906102869190612237565b61082c565b005b6102a760048036038101906102a2919061241a565b6109ee565b005b6102c360048036038101906102be9190612237565b610a0d565b6040516102d09190612401565b60405180910390f35b6102f360048036038101906102ee9190612237565b610ad6565b60405161030091906122a1565b60405180910390f35b610323600480360381019061031e919061246a565b610ae7565b005b61033f600480360381019061033a919061246a565b610b88565b60405161034c9190612331565b60405180910390f35b61036f600480360381019061036a9190612495565b610c3e565b60405161037c91906124e2565b60405180910390f35b61038d610cc7565b60405161039a91906121e4565b60405180910390f35b6103ab610d57565b6040516103b89190612331565b60405180910390f35b6103db60048036038101906103d69190612525565b610d60565b005b6103f760048036038101906103f2919061268f565b610d76565b005b610413600480360381019061040e9190612237565b610d93565b60405161042091906121e4565b60405180910390f35b610431610df9565b60405161043e9190612331565b60405180910390f35b610461600480360381019061045c919061270f565b610e20565b60405161046e9190612141565b60405180910390f35b610491600480360381019061048c91906127a1565b610eae565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061055d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056d575061056c82611205565b5b9050919050565b60605f805461058290612832565b80601f01602080910402602001604051908101604052809291908181526020018280546105ae90612832565b80156105f95780601f106105d0576101008083540402835291602001916105f9565b820191905f5260205f20905b8154815290600101906020018083116105dc57829003601f168201915b5050505050905090565b5f61060d8261126e565b50610617826112f4565b9050919050565b610630828261062b61132d565b611334565b5050565b5f600754905090565b61064561204b565b60095f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815250509050919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361079d575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161079491906122a1565b60405180910390fd5b5f6107b083836107ab61132d565b611346565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610826578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161081d93929190612862565b60405180910390fd5b50505050565b61083581610ad6565b73ffffffffffffffffffffffffffffffffffffffff1661085361132d565b73ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090612907565b60405180910390fd5b6108b281611551565b6040518060a001604052806001151581526020016108ce61132d565b73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f801b81526020015f801b81525060085f8381526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff16021790555060608201518160010155608082015181600201559050507f11ff58316397fb831ab41f993e10966c1c204c0a340a8118ec5c17f82e3f2d3c816109d561132d565b6040516109e3929190612925565b60405180910390a150565b610a0883838360405180602001604052805f815250610d76565b505050565b610a1561204b565b60085f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815250509050919050565b5f610ae08261126e565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000060065410610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b42906129bc565b60405180910390fd5b610b57816006546115d3565b60065f815480929190610b6990612a07565b919050555060075f815480929190610b8090612a07565b919050555050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf9575f6040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610bf091906122a1565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f6510000000000273ffffffffffffffffffffffffffffffffffffffff16638d6c67c584846040518363ffffffff1660e01b8152600401610c80929190612925565b602060405180830381865afa158015610c9b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cbf9190612a62565b905092915050565b606060018054610cd690612832565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0290612832565b8015610d4d5780601f10610d2457610100808354040283529160200191610d4d565b820191905f5260205f20905b815481529060010190602001808311610d3057829003601f168201915b5050505050905090565b5f600654905090565b610d72610d6b61132d565b83836115f0565b5050565b610d8184848461072d565b610d8d84848484611759565b50505050565b6060610d9e8261126e565b505f610da861190b565b90505f815111610dc65760405180602001604052805f815250610df1565b80610dd084611921565b604051602001610de1929190612ac7565b6040516020818303038152906040525b915050919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b60085f8581526020019081526020015f205f015f9054906101000a900460ff16610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0490612b5a565b60405180910390fd5b5f610f4b8560085f8881526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c3e565b90505f610f57826119eb565b90505f6510000000000173ffffffffffffffffffffffffffffffffffffffff16633ee6ac9e838888886040518563ffffffff1660e01b8152600401610f9f9493929190612b87565b602060405180830381865afa158015610fba573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fde9190612bde565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590612c79565b60405180910390fd5b6040518060a0016040528060011515815260200160085f8a81526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018760ff1681526020018681526020018581525060095f8981526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff160217905550606082015181600101556080820151816002015590505060085f8881526020019081526020015f205f8082015f6101000a81549060ff02191690555f820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555f820160156101000a81549060ff0219169055600182015f9055600282015f9055505050505050505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8061127983611a71565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112eb57826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016112e29190612331565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b6113418383836001611aaa565b505050565b5f8061135184611a71565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461139257611391818486611c69565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461141d576113d15f855f80611aaa565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461149c57600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f61155d5f835f611346565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115cf57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016115c69190612331565b60405180910390fd5b5050565b6115ec828260405180602001604052805f815250611d2c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361166057816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161165791906122a1565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161174c9190612141565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b1115611905578273ffffffffffffffffffffffffffffffffffffffff1663150b7a0261179c61132d565b8685856040518563ffffffff1660e01b81526004016117be9493929190612ce9565b6020604051808303815f875af19250505080156117f957506040513d601f19601f820116820180604052508101906117f69190612d47565b60015b61187a573d805f8114611827576040519150601f19603f3d011682016040523d82523d5f602084013e61182c565b606091505b505f81510361187257836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161186991906122a1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461190357836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118fa91906122a1565b60405180910390fd5b505b50505050565b606060405180602001604052805f815250905090565b60605f600161192f84611d47565b0190505f8167ffffffffffffffff81111561194d5761194c61256b565b5b6040519080825280601f01601f19166020018201604052801561197f5781602001600182028036833780820191505090505b5090505f82602001820190505b6001156119e0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119d5576119d4612d72565b5b0494505f850361198c575b819350505050919050565b5f6510000000000273ffffffffffffffffffffffffffffffffffffffff1663518af8db836040518263ffffffff1660e01b8152600401611a2b91906124e2565b602060405180830381865afa158015611a46573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a6a9190612a62565b9050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611ae257505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611c14575f611af18461126e565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b5b57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611b6e5750611b6c8184610e20565b155b15611bb057826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611ba791906122a1565b60405180910390fd5b8115611c1257838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611c74838383611e98565b611d27575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ce857806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611cdf9190612331565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611d1e929190612d9f565b60405180910390fd5b505050565b611d368383611f58565b611d425f848484611759565b505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611da3577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611d9957611d98612d72565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611de0576d04ee2d6d415b85acef81000000008381611dd657611dd5612d72565b5b0492506020810190505b662386f26fc100008310611e0f57662386f26fc100008381611e0557611e04612d72565b5b0492506010810190505b6305f5e1008310611e38576305f5e1008381611e2e57611e2d612d72565b5b0492506008810190505b6127108310611e5d576127108381611e5357611e52612d72565b5b0492506004810190505b60648310611e805760648381611e7657611e75612d72565b5b0492506002810190505b600a8310611e8f576001810190505b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f4f57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f105750611f0f8484610e20565b5b80611f4e57508273ffffffffffffffffffffffffffffffffffffffff16611f36836112f4565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fc8575f6040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611fbf91906122a1565b60405180910390fd5b5f611fd483835f611346565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612046575f6040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161203d91906122a1565b60405180910390fd5b505050565b6040518060a001604052805f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f80191681526020015f80191681525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120db816120a7565b81146120e5575f80fd5b50565b5f813590506120f6816120d2565b92915050565b5f602082840312156121115761211061209f565b5b5f61211e848285016120e8565b91505092915050565b5f8115159050919050565b61213b81612127565b82525050565b5f6020820190506121545f830184612132565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612191578082015181840152602081019050612176565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6121b68261215a565b6121c08185612164565b93506121d0818560208601612174565b6121d98161219c565b840191505092915050565b5f6020820190508181035f8301526121fc81846121ac565b905092915050565b5f819050919050565b61221681612204565b8114612220575f80fd5b50565b5f813590506122318161220d565b92915050565b5f6020828403121561224c5761224b61209f565b5b5f61225984828501612223565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61228b82612262565b9050919050565b61229b81612281565b82525050565b5f6020820190506122b45f830184612292565b92915050565b6122c381612281565b81146122cd575f80fd5b50565b5f813590506122de816122ba565b92915050565b5f80604083850312156122fa576122f961209f565b5b5f612307858286016122d0565b925050602061231885828601612223565b9150509250929050565b61232b81612204565b82525050565b5f6020820190506123445f830184612322565b92915050565b61235381612127565b82525050565b61236281612281565b82525050565b5f60ff82169050919050565b61237d81612368565b82525050565b5f819050919050565b61239581612383565b82525050565b60a082015f8201516123af5f85018261234a565b5060208201516123c26020850182612359565b5060408201516123d56040850182612374565b5060608201516123e8606085018261238c565b5060808201516123fb608085018261238c565b50505050565b5f60a0820190506124145f83018461239b565b92915050565b5f805f606084860312156124315761243061209f565b5b5f61243e868287016122d0565b935050602061244f868287016122d0565b925050604061246086828701612223565b9150509250925092565b5f6020828403121561247f5761247e61209f565b5b5f61248c848285016122d0565b91505092915050565b5f80604083850312156124ab576124aa61209f565b5b5f6124b885828601612223565b92505060206124c9858286016122d0565b9150509250929050565b6124dc81612383565b82525050565b5f6020820190506124f55f8301846124d3565b92915050565b61250481612127565b811461250e575f80fd5b50565b5f8135905061251f816124fb565b92915050565b5f806040838503121561253b5761253a61209f565b5b5f612548858286016122d0565b925050602061255985828601612511565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6125a18261219c565b810181811067ffffffffffffffff821117156125c0576125bf61256b565b5b80604052505050565b5f6125d2612096565b90506125de8282612598565b919050565b5f67ffffffffffffffff8211156125fd576125fc61256b565b5b6126068261219c565b9050602081019050919050565b828183375f83830152505050565b5f61263361262e846125e3565b6125c9565b90508281526020810184848401111561264f5761264e612567565b5b61265a848285612613565b509392505050565b5f82601f83011261267657612675612563565b5b8135612686848260208601612621565b91505092915050565b5f805f80608085870312156126a7576126a661209f565b5b5f6126b4878288016122d0565b94505060206126c5878288016122d0565b93505060406126d687828801612223565b925050606085013567ffffffffffffffff8111156126f7576126f66120a3565b5b61270387828801612662565b91505092959194509250565b5f80604083850312156127255761272461209f565b5b5f612732858286016122d0565b9250506020612743858286016122d0565b9150509250929050565b61275681612368565b8114612760575f80fd5b50565b5f813590506127718161274d565b92915050565b61278081612383565b811461278a575f80fd5b50565b5f8135905061279b81612777565b92915050565b5f805f80608085870312156127b9576127b861209f565b5b5f6127c687828801612223565b94505060206127d787828801612763565b93505060406127e88782880161278d565b92505060606127f98782880161278d565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061284957607f821691505b60208210810361285c5761285b612805565b5b50919050565b5f6060820190506128755f830186612292565b6128826020830185612322565b61288f6040830184612292565b949350505050565b7f4d79546f6b656e4d696e7461626c653a2063616c6c6572206973206e6f7420745f8201527f6865206f776e6572000000000000000000000000000000000000000000000000602082015250565b5f6128f1602883612164565b91506128fc82612897565b604082019050919050565b5f6020820190508181035f83015261291e816128e5565b9050919050565b5f6040820190506129385f830185612322565b6129456020830184612292565b9392505050565b7f4d79546f6b656e4d696e7461626c653a206d617820737570706c7920726561635f8201527f6865640000000000000000000000000000000000000000000000000000000000602082015250565b5f6129a6602383612164565b91506129b18261294c565b604082019050919050565b5f6020820190508181035f8301526129d38161299a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612a1182612204565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a4357612a426129da565b5b600182019050919050565b5f81519050612a5c81612777565b92915050565b5f60208284031215612a7757612a7661209f565b5b5f612a8484828501612a4e565b91505092915050565b5f81905092915050565b5f612aa18261215a565b612aab8185612a8d565b9350612abb818560208601612174565b80840191505092915050565b5f612ad28285612a97565b9150612ade8284612a97565b91508190509392505050565b7f4d79546f6b656e4d696e7461626c653a20746f6b656e206973206e6f742070725f8201527f652d6275726e6564000000000000000000000000000000000000000000000000602082015250565b5f612b44602883612164565b9150612b4f82612aea565b604082019050919050565b5f6020820190508181035f830152612b7181612b38565b9050919050565b612b8181612368565b82525050565b5f608082019050612b9a5f8301876124d3565b612ba76020830186612b78565b612bb460408301856124d3565b612bc160608301846124d3565b95945050505050565b5f81519050612bd8816122ba565b92915050565b5f60208284031215612bf357612bf261209f565b5b5f612c0084828501612bca565b91505092915050565b7f4d79546f6b656e204d696e7461626c653a20696e76616c6964207369676e61745f8201527f7572650000000000000000000000000000000000000000000000000000000000602082015250565b5f612c63602383612164565b9150612c6e82612c09565b604082019050919050565b5f6020820190508181035f830152612c9081612c57565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f612cbb82612c97565b612cc58185612ca1565b9350612cd5818560208601612174565b612cde8161219c565b840191505092915050565b5f608082019050612cfc5f830187612292565b612d096020830186612292565b612d166040830185612322565b8181036060830152612d288184612cb1565b905095945050505050565b5f81519050612d41816120d2565b92915050565b5f60208284031215612d5c57612d5b61209f565b5b5f612d6984828501612d33565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f604082019050612db25f830185612292565b612dbf6020830184612322565b939250505056fea26469706673582212205104fb2a2d4729f75c0088f204ffd86359047b0eaa0820fd661c17b546c180d264736f6c634300081800330000000000000000000000000000000000000000000000000000000000002710000000000000000000000000c4e38adad3caa46471428ecb479d87d95ab6eb5e");
      // const TestAccount& from, const Address& to, const uint256_t& value, Bytes data = Bytes()
      auto createTx = sdk.createNewTx(sdk.getChainOwnerAccount(), Address(), 0, erc721CreateBytes);
      sdk.advanceChain(0, {createTx});
      REQUIRE(sdk.getEvmContracts().size() == 1);
      REQUIRE(sdk.getEvmContractAddress(createTx.hash()) != Address());
      auto createTxHash = createTx.hash();
      auto contractAddress = sdk.getEvmContractAddress(createTxHash);
      REQUIRE(sdk.isEvmContract(contractAddress));
      auto ERC721MintAddress = contractAddress;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "MyTokenMintable");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "MTM");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 0);
      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address>(events[0].getData());
      const auto& [tokenIdBurn, userBurn] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn));
      std::cout << "message: " << Hex::fromBytes(createMessage(tokenIdBurn, userBurn)) << std::endl;
      std::cout << "preMessageHash: " << hash.hex() << std::endl;
      auto messageHash = _toTyped32ByteDataHash(hash);
      std::cout << "messageHash: " << messageHash.hex() << std::endl;

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;

      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      std::cout << "burned: " << std::endl;

      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));

    }
  }
}