/*
  Copyright (c) [2023-2024] [Sparq Network]
  This software is distributed under the MIT License.
  See the LICENSE.txt file in the project root for more information.
*/

#include "../../src/libs/catch2/catch_amalgamated.hpp"
#include "../../src/contract/templates/erc721mint.h"
#include "../../src/contract/abi.h"
#include "../../src/utils/db.h"
#include "../../src/utils/options.h"
#include "../../src/contract/contractmanager.h"
#include "../../src/core/rdpos.h"
#include "../sdktestsuite.hpp"

Bytes createMessage (const uint256_t& tokenId, const Address& user) {
  Bytes value;
  value.reserve(52); // 32 bytes for tokenId and 20 bytes for user
  Utils::appendBytes(value, Utils::uint256ToBytes(tokenId));
  Utils::appendBytes(value, user.asBytes());
  return value;
}

Hash _toTyped32ByteDataHash (const Hash& messageHash) {
  Bytes value;
  value.insert(value.end(), 0x19);
  std::string ethereumSignedMessage = "Ethereum Signed Message:";
  Utils::appendBytes(value, ethereumSignedMessage);
  value.insert(value.end(), '\n');
  Utils::appendBytes(value, std::to_string(32));
  Utils::appendBytes(value, messageHash);
  std::cout << "_toTyped32ByteDataHash: " << Hex::fromBytes(value) << std::endl;
  return Utils::sha3(value);
}


namespace TERC721 {
  TEST_CASE("ERC721Mint Class", "[contract][erc721mint]") {

    PrivKey signerKey(Hex::toBytes("0x1b2151ea1c4c24ee3c61ab5d37e383caf1b81a9ce895de9aba9119eb0233123d"));
    Address signerAddress(Secp256k1::toAddress(Secp256k1::toUPub(signerKey)));

    SECTION("ERC721Mint Creation, PreBurn, Burn") {
      std::cout << "Signed Address: " << signerAddress.hex(true) << std::endl;
      std::cout << "Signer Privkey: " << signerKey.hex() << std::endl;
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreation");
      auto ERC721MintAddress = sdk.deployContract<ERC721Mint>(std::string("My Test NFT!"), std::string("NFT"), uint256_t(10000), signerAddress);
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "My Test NFT!");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "NFT");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 0);
      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address>(events[0].getData());
      const auto& [tokenIdBurn, userBurn] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn));
      auto messageHash = _toTyped32ByteDataHash(hash);

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;
      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));
    }

    SECTION("ERC721Mint Creation, PreBurn, Burn EVM") {
      SDKTestSuite sdk = SDKTestSuite::createNewEnvironment("testERC721MintCreationEVM");
      const auto erc721CreateBytes = Hex::toBytes("0x60c060405234801562000010575f80fd5b5060405162003390380380620033908339818101604052810190620000369190620001b6565b6040518060400160405280600f81526020017f4d79546f6b656e4d696e7461626c6500000000000000000000000000000000008152506040518060400160405280600381526020017f4d544d0000000000000000000000000000000000000000000000000000000000815250815f9081620000b2919062000456565b508060019081620000c4919062000456565b5050505f6006819055505f60078190555081608081815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505050506200053a565b5f80fd5b5f819050919050565b62000131816200011d565b81146200013c575f80fd5b50565b5f815190506200014f8162000126565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001808262000155565b9050919050565b620001928162000174565b81146200019d575f80fd5b50565b5f81519050620001b08162000187565b92915050565b5f8060408385031215620001cf57620001ce62000119565b5b5f620001de858286016200013f565b9250506020620001f185828601620001a0565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200027757607f821691505b6020821081036200028d576200028c62000232565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620002f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002b4565b620002fd8683620002b4565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6200033e6200033862000332846200011d565b62000315565b6200011d565b9050919050565b5f819050919050565b62000359836200031e565b62000371620003688262000345565b848454620002c0565b825550505050565b5f90565b6200038762000379565b620003948184846200034e565b505050565b5b81811015620003bb57620003af5f826200037d565b6001810190506200039a565b5050565b601f8211156200040a57620003d48162000293565b620003df84620002a5565b81016020851015620003ef578190505b62000407620003fe85620002a5565b83018262000399565b50505b505050565b5f82821c905092915050565b5f6200042c5f19846008026200040f565b1980831691505092915050565b5f6200044683836200041b565b9150826002028217905092915050565b6200046182620001fb565b67ffffffffffffffff8111156200047d576200047c62000205565b5b6200048982546200025f565b62000496828285620003bf565b5f60209050601f831160018114620004cc575f8415620004b7578287015190505b620004c3858262000439565b86555062000532565b601f198416620004dc8662000293565b5f5b828110156200050557848901518255600182019150602085019450602081019050620004de565b8683101562000525578489015162000521601f8916826200041b565b8355505b6001600288020188555050505b505050505050565b60805160a051612e266200056a5f395f81816107090152610ffe01525f8181610ae90152610e0a0152612e265ff3fe608060405234801561000f575f80fd5b506004361061014b575f3560e01c80636352211e116100c1578063a22cb4651161007a578063a22cb465146103c1578063b88d4fde146103dd578063c87b56dd146103f9578063d5abeb0114610429578063e985e9c514610447578063fcc82dc2146104775761014b565b80636352211e146102d95780636a6278421461030957806370a08231146103255780637240d90b1461035557806395d89b411461038557806398bdf6f5146103a35761014b565b80631c348dd3116101135780631c348dd314610207578063238ac9331461023757806323b872dd14610255578063343333621461027157806342842e0e1461028d57806362b6b5bf146102a95761014b565b806301ffc9a71461014f57806306fdde031461017f578063081812fc1461019d578063095ea7b3146101cd57806318160ddd146101e9575b5f80fd5b61016960048036038101906101649190612126565b610493565b604051610176919061216b565b60405180910390f35b610187610574565b604051610194919061220e565b60405180910390f35b6101b760048036038101906101b29190612261565b610603565b6040516101c491906122cb565b60405180910390f35b6101e760048036038101906101e2919061230e565b61061e565b005b6101f1610634565b6040516101fe919061235b565b60405180910390f35b610221600480360381019061021c9190612261565b61063d565b60405161022e919061242b565b60405180910390f35b61023f610706565b60405161024c91906122cb565b60405180910390f35b61026f600480360381019061026a9190612444565b61072d565b005b61028b60048036038101906102869190612261565b61082c565b005b6102a760048036038101906102a29190612444565b6109ee565b005b6102c360048036038101906102be9190612261565b610a0d565b6040516102d0919061242b565b60405180910390f35b6102f360048036038101906102ee9190612261565b610ad6565b60405161030091906122cb565b60405180910390f35b610323600480360381019061031e9190612494565b610ae7565b005b61033f600480360381019061033a9190612494565b610b88565b60405161034c919061235b565b60405180910390f35b61036f600480360381019061036a91906124bf565b610c3e565b60405161037c919061250c565b60405180910390f35b61038d610cd5565b60405161039a919061220e565b60405180910390f35b6103ab610d65565b6040516103b8919061235b565b60405180910390f35b6103db60048036038101906103d6919061254f565b610d6e565b005b6103f760048036038101906103f291906126b9565b610d84565b005b610413600480360381019061040e9190612261565b610da1565b604051610420919061220e565b60405180910390f35b610431610e07565b60405161043e919061235b565b60405180910390f35b610461600480360381019061045c9190612739565b610e2e565b60405161046e919061216b565b60405180910390f35b610491600480360381019061048c91906127cb565b610ebc565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061055d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056d575061056c82611221565b5b9050919050565b60605f80546105829061285c565b80601f01602080910402602001604051908101604052809291908181526020018280546105ae9061285c565b80156105f95780601f106105d0576101008083540402835291602001916105f9565b820191905f5260205f20905b8154815290600101906020018083116105dc57829003601f168201915b5050505050905090565b5f61060d8261128a565b5061061782611310565b9050919050565b610630828261062b611349565b611350565b5050565b5f600754905090565b610645612075565b60095f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815250509050919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361079d575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161079491906122cb565b60405180910390fd5b5f6107b083836107ab611349565b611362565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610826578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161081d9392919061288c565b60405180910390fd5b50505050565b61083581610ad6565b73ffffffffffffffffffffffffffffffffffffffff16610853611349565b73ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090612931565b60405180910390fd5b6108b28161156d565b6040518060a001604052806001151581526020016108ce611349565b73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f801b81526020015f801b81525060085f8381526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff16021790555060608201518160010155608082015181600201559050507f11ff58316397fb831ab41f993e10966c1c204c0a340a8118ec5c17f82e3f2d3c816109d5611349565b6040516109e392919061294f565b60405180910390a150565b610a0883838360405180602001604052805f815250610d84565b505050565b610a15612075565b60085f8381526020019081526020015f206040518060a00160405290815f82015f9054906101000a900460ff161515151581526020015f820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160159054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815250509050919050565b5f610ae08261128a565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000060065410610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b42906129e6565b60405180910390fd5b610b57816006546115ef565b60065f815480929190610b6990612a31565b919050555060075f815480929190610b8090612a31565b919050555050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf9575f6040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610bf091906122cb565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f73100000000000000000000000000010000000000273ffffffffffffffffffffffffffffffffffffffff16638d6c67c584846040518363ffffffff1660e01b8152600401610c8e92919061294f565b602060405180830381865afa158015610ca9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ccd9190612a8c565b905092915050565b606060018054610ce49061285c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d109061285c565b8015610d5b5780601f10610d3257610100808354040283529160200191610d5b565b820191905f5260205f20905b815481529060010190602001808311610d3e57829003601f168201915b5050505050905090565b5f600654905090565b610d80610d79611349565b838361160c565b5050565b610d8f84848461072d565b610d9b84848484611775565b50505050565b6060610dac8261128a565b505f610db6611927565b90505f815111610dd45760405180602001604052805f815250610dff565b80610dde8461193d565b604051602001610def929190612af1565b6040516020818303038152906040525b915050919050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b60085f8581526020019081526020015f205f015f9054906101000a900460ff16610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290612b84565b60405180910390fd5b5f610f598560085f8881526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c3e565b90505f610f6582611a07565b90505f73100000000000000000000000000010000000000173ffffffffffffffffffffffffffffffffffffffff16633ee6ac9e838888886040518563ffffffff1660e01b8152600401610fbb9493929190612bb1565b602060405180830381865afa158015610fd6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ffa9190612c08565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108190612ca3565b60405180910390fd5b6040518060a0016040528060011515815260200160085f8a81526020019081526020015f205f0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018760ff1681526020018681526020018581525060095f8981526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151815f0160156101000a81548160ff021916908360ff160217905550606082015181600101556080820151816002015590505060085f8881526020019081526020015f205f8082015f6101000a81549060ff02191690555f820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555f820160156101000a81549060ff0219169055600182015f9055600282015f9055505050505050505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8061129583611a9b565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361130757826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016112fe919061235b565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b61135d8383836001611ad4565b505050565b5f8061136d84611a9b565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146113ae576113ad818486611c93565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611439576113ed5f855f80611ad4565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146114b857600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f6115795f835f611362565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115eb57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016115e2919061235b565b60405180910390fd5b5050565b611608828260405180602001604052805f815250611d56565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361167c57816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161167391906122cb565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611768919061216b565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b1115611921578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026117b8611349565b8685856040518563ffffffff1660e01b81526004016117da9493929190612d13565b6020604051808303815f875af192505050801561181557506040513d601f19601f820116820180604052508101906118129190612d71565b60015b611896573d805f8114611843576040519150601f19603f3d011682016040523d82523d5f602084013e611848565b606091505b505f81510361188e57836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161188591906122cb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461191f57836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161191691906122cb565b60405180910390fd5b505b50505050565b606060405180602001604052805f815250905090565b60605f600161194b84611d71565b0190505f8167ffffffffffffffff81111561196957611968612595565b5b6040519080825280601f01601f19166020018201604052801561199b5781602001600182028036833780820191505090505b5090505f82602001820190505b6001156119fc578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119f1576119f0612d9c565b5b0494505f85036119a8575b819350505050919050565b5f73100000000000000000000000000010000000000273ffffffffffffffffffffffffffffffffffffffff1663518af8db836040518263ffffffff1660e01b8152600401611a55919061250c565b602060405180830381865afa158015611a70573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a949190612a8c565b9050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611b0c57505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611c3e575f611b1b8461128a565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b8557508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611b985750611b968184610e2e565b155b15611bda57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611bd191906122cb565b60405180910390fd5b8115611c3c57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611c9e838383611ec2565b611d51575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d1257806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611d09919061235b565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611d48929190612dc9565b60405180910390fd5b505050565b611d608383611f82565b611d6c5f848484611775565b505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611dcd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611dc357611dc2612d9c565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611e0a576d04ee2d6d415b85acef81000000008381611e0057611dff612d9c565b5b0492506020810190505b662386f26fc100008310611e3957662386f26fc100008381611e2f57611e2e612d9c565b5b0492506010810190505b6305f5e1008310611e62576305f5e1008381611e5857611e57612d9c565b5b0492506008810190505b6127108310611e87576127108381611e7d57611e7c612d9c565b5b0492506004810190505b60648310611eaa5760648381611ea057611e9f612d9c565b5b0492506002810190505b600a8310611eb9576001810190505b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f7957508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f3a5750611f398484610e2e565b5b80611f7857508273ffffffffffffffffffffffffffffffffffffffff16611f6083611310565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ff2575f6040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611fe991906122cb565b60405180910390fd5b5f611ffe83835f611362565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612070575f6040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161206791906122cb565b60405180910390fd5b505050565b6040518060a001604052805f151581526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f80191681526020015f80191681525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612105816120d1565b811461210f575f80fd5b50565b5f81359050612120816120fc565b92915050565b5f6020828403121561213b5761213a6120c9565b5b5f61214884828501612112565b91505092915050565b5f8115159050919050565b61216581612151565b82525050565b5f60208201905061217e5f83018461215c565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156121bb5780820151818401526020810190506121a0565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6121e082612184565b6121ea818561218e565b93506121fa81856020860161219e565b612203816121c6565b840191505092915050565b5f6020820190508181035f83015261222681846121d6565b905092915050565b5f819050919050565b6122408161222e565b811461224a575f80fd5b50565b5f8135905061225b81612237565b92915050565b5f60208284031215612276576122756120c9565b5b5f6122838482850161224d565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6122b58261228c565b9050919050565b6122c5816122ab565b82525050565b5f6020820190506122de5f8301846122bc565b92915050565b6122ed816122ab565b81146122f7575f80fd5b50565b5f81359050612308816122e4565b92915050565b5f8060408385031215612324576123236120c9565b5b5f612331858286016122fa565b92505060206123428582860161224d565b9150509250929050565b6123558161222e565b82525050565b5f60208201905061236e5f83018461234c565b92915050565b61237d81612151565b82525050565b61238c816122ab565b82525050565b5f60ff82169050919050565b6123a781612392565b82525050565b5f819050919050565b6123bf816123ad565b82525050565b60a082015f8201516123d95f850182612374565b5060208201516123ec6020850182612383565b5060408201516123ff604085018261239e565b50606082015161241260608501826123b6565b50608082015161242560808501826123b6565b50505050565b5f60a08201905061243e5f8301846123c5565b92915050565b5f805f6060848603121561245b5761245a6120c9565b5b5f612468868287016122fa565b9350506020612479868287016122fa565b925050604061248a8682870161224d565b9150509250925092565b5f602082840312156124a9576124a86120c9565b5b5f6124b6848285016122fa565b91505092915050565b5f80604083850312156124d5576124d46120c9565b5b5f6124e28582860161224d565b92505060206124f3858286016122fa565b9150509250929050565b612506816123ad565b82525050565b5f60208201905061251f5f8301846124fd565b92915050565b61252e81612151565b8114612538575f80fd5b50565b5f8135905061254981612525565b92915050565b5f8060408385031215612565576125646120c9565b5b5f612572858286016122fa565b92505060206125838582860161253b565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6125cb826121c6565b810181811067ffffffffffffffff821117156125ea576125e9612595565b5b80604052505050565b5f6125fc6120c0565b905061260882826125c2565b919050565b5f67ffffffffffffffff82111561262757612626612595565b5b612630826121c6565b9050602081019050919050565b828183375f83830152505050565b5f61265d6126588461260d565b6125f3565b90508281526020810184848401111561267957612678612591565b5b61268484828561263d565b509392505050565b5f82601f8301126126a05761269f61258d565b5b81356126b084826020860161264b565b91505092915050565b5f805f80608085870312156126d1576126d06120c9565b5b5f6126de878288016122fa565b94505060206126ef878288016122fa565b93505060406127008782880161224d565b925050606085013567ffffffffffffffff811115612721576127206120cd565b5b61272d8782880161268c565b91505092959194509250565b5f806040838503121561274f5761274e6120c9565b5b5f61275c858286016122fa565b925050602061276d858286016122fa565b9150509250929050565b61278081612392565b811461278a575f80fd5b50565b5f8135905061279b81612777565b92915050565b6127aa816123ad565b81146127b4575f80fd5b50565b5f813590506127c5816127a1565b92915050565b5f805f80608085870312156127e3576127e26120c9565b5b5f6127f08782880161224d565b94505060206128018782880161278d565b9350506040612812878288016127b7565b9250506060612823878288016127b7565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061287357607f821691505b6020821081036128865761288561282f565b5b50919050565b5f60608201905061289f5f8301866122bc565b6128ac602083018561234c565b6128b960408301846122bc565b949350505050565b7f4d79546f6b656e4d696e7461626c653a2063616c6c6572206973206e6f7420745f8201527f6865206f776e6572000000000000000000000000000000000000000000000000602082015250565b5f61291b60288361218e565b9150612926826128c1565b604082019050919050565b5f6020820190508181035f8301526129488161290f565b9050919050565b5f6040820190506129625f83018561234c565b61296f60208301846122bc565b9392505050565b7f4d79546f6b656e4d696e7461626c653a206d617820737570706c7920726561635f8201527f6865640000000000000000000000000000000000000000000000000000000000602082015250565b5f6129d060238361218e565b91506129db82612976565b604082019050919050565b5f6020820190508181035f8301526129fd816129c4565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612a3b8261222e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a6d57612a6c612a04565b5b600182019050919050565b5f81519050612a86816127a1565b92915050565b5f60208284031215612aa157612aa06120c9565b5b5f612aae84828501612a78565b91505092915050565b5f81905092915050565b5f612acb82612184565b612ad58185612ab7565b9350612ae581856020860161219e565b80840191505092915050565b5f612afc8285612ac1565b9150612b088284612ac1565b91508190509392505050565b7f4d79546f6b656e4d696e7461626c653a20746f6b656e206973206e6f742070725f8201527f652d6275726e6564000000000000000000000000000000000000000000000000602082015250565b5f612b6e60288361218e565b9150612b7982612b14565b604082019050919050565b5f6020820190508181035f830152612b9b81612b62565b9050919050565b612bab81612392565b82525050565b5f608082019050612bc45f8301876124fd565b612bd16020830186612ba2565b612bde60408301856124fd565b612beb60608301846124fd565b95945050505050565b5f81519050612c02816122e4565b92915050565b5f60208284031215612c1d57612c1c6120c9565b5b5f612c2a84828501612bf4565b91505092915050565b7f4d79546f6b656e204d696e7461626c653a20696e76616c6964207369676e61745f8201527f7572650000000000000000000000000000000000000000000000000000000000602082015250565b5f612c8d60238361218e565b9150612c9882612c33565b604082019050919050565b5f6020820190508181035f830152612cba81612c81565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f612ce582612cc1565b612cef8185612ccb565b9350612cff81856020860161219e565b612d08816121c6565b840191505092915050565b5f608082019050612d265f8301876122bc565b612d3360208301866122bc565b612d40604083018561234c565b8181036060830152612d528184612cdb565b905095945050505050565b5f81519050612d6b816120fc565b92915050565b5f60208284031215612d8657612d856120c9565b5b5f612d9384828501612d5d565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f604082019050612ddc5f8301856122bc565b612de9602083018461234c565b939250505056fea264697066735822122026b42da4860efef70602dfead1c3d8c66071e799bce467d2eb227f07ec36f05b64736f6c634300081800330000000000000000000000000000000000000000000000000000000000002710000000000000000000000000c4e38adad3caa46471428ecb479d87d95ab6eb5e");
      // const TestAccount& from, const Address& to, const uint256_t& value, Bytes data = Bytes()
      auto createTx = sdk.createNewTx(sdk.getChainOwnerAccount(), Address(), 0, erc721CreateBytes);
      sdk.advanceChain(0, {createTx});
      REQUIRE(sdk.getEvmContracts().size() == 1);
      REQUIRE(sdk.getEvmContractAddress(createTx.hash()) != Address());
      auto createTxHash = createTx.hash();
      auto contractAddress = sdk.getEvmContractAddress(createTxHash);
      REQUIRE(sdk.isEvmContract(contractAddress));
      auto ERC721MintAddress = contractAddress;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::name) == "MyTokenMintable");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::symbol) == "MTM");
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::maxSupply) == 10000);
      // Try minting
      auto tokenId = sdk.callFunction(ERC721MintAddress, &ERC721Mint::mint, sdk.getChainOwnerAccount().address);
      std::cout << "OwnerOf: " << std::endl;
      REQUIRE(sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::ownerOf, uint256_t(0)) == sdk.getChainOwnerAccount().address);
      // Check for emitted event
      std::cout << "Events: " << std::endl;
      auto events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 0);
      // Try burning
      std::cout << "preBurning: " << std::endl;
      auto message = sdk.callFunction(ERC721MintAddress, &ERC721Mint::preBurn, uint256_t(0));
      std::cout << "Preburn hash: " << message.hex() << std::endl;
      // Now we should have an event
      events = sdk.getEventsEmittedByAddress(ERC721MintAddress, &ERC721Mint::PreBurnedEvent);
      REQUIRE(events.size() == 1);
      // Within the event data, there should be token ID and the address of the users in the data
      const auto dataTlp = ABI::Decoder::decodeData<uint256_t, Address>(events[0].getData());
      const auto& [tokenIdBurn, userBurn] = dataTlp;
      REQUIRE(tokenIdBurn == 0);
      REQUIRE(userBurn == sdk.getChainOwnerAccount().address);

      auto hash = Utils::sha3(createMessage(tokenIdBurn, userBurn));
      std::cout << "message: " << Hex::fromBytes(createMessage(tokenIdBurn, userBurn)) << std::endl;
      std::cout << "preMessageHash: " << hash.hex() << std::endl;
      auto messageHash = _toTyped32ByteDataHash(hash);
      std::cout << "messageHash: " << messageHash.hex() << std::endl;

      auto signature = Secp256k1::sign(messageHash, signerKey);
      const auto& r = signature.r();
      const auto& s = signature.s();
      auto v = signature.v();
      v += 27;
      std::cout << "signature: " << signature.hex() << std::endl;
      std::cout << "mesageHash: " << messageHash.hex() << std::endl;
      std::cout << "r: " << Hex::fromUint(r) << std::endl;
      std::cout << "s: " << Hex::fromUint(s) << std::endl;
      std::cout << "v: " << v << std::endl;
      // Call burn function
      std::cout << "burning: " << std::endl;

      Hash rHash(Utils::uint256ToBytes(r));
      Hash sHash(Utils::uint256ToBytes(s));
      std::cout << "rHash: " << rHash.hex() << std::endl;
      std::cout << "sHash: " << sHash.hex() << std::endl;
      std::cout << "SENDING BURN ON EVMM: " << std::endl;
      sdk.callFunction(ERC721MintAddress, &ERC721Mint::burn, uint256_t(0), uint8_t(v), rHash, sHash);
      std::cout << "burned: " << std::endl;

      auto burned = sdk.callViewFunction(ERC721MintAddress, &ERC721Mint::burnedTokens, uint256_t(0));
      const auto& [burnedExists, burnedOwner, burnedV, burnedR, burnedS] = burned;
      REQUIRE(burnedExists == true);
      REQUIRE(burnedOwner == sdk.getChainOwnerAccount().address);
      REQUIRE(burnedV == v);
      REQUIRE(burnedR == Hash(Utils::uint256ToBytes(r)));
      REQUIRE(burnedS == Hash(Utils::uint256ToBytes(s)));

    }
  }
}